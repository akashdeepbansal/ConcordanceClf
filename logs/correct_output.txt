0:  and Bri0−1 is such thatri0−1−ri0−1+3ri04=34(ri0−1−ri0)=316i0>4h0.   MATH   for an arbitrary  MATH  (we 
 : [array(['we', 'such', 'math we', 'math for', 'math', 'is such', 'is',
       'for', 'and', 'an', '34'], dtype='<U24')],
 true: 0, pred: 0
1:  and  MATH , we get that   MATH   which contradicts  MATH  . Therefore, there 
 : [array(['which contradicts', 'which', 'we get', 'we', 'therefore', 'there',
       'that math', 'that', 'math which', 'math we', 'math therefore',
       'math', 'get that', 'get', 'contradicts', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
3:  of the non-differentiable points of   MATH  , namely  MATH  , coincides with the 
 : [array(['with the', 'with', 'the', 'points', 'of the', 'of math', 'of',
       'non', 'math', 'coincides with', 'coincides'], dtype='<U24')],
 true: 0, pred: 0
4:  MATH   which is coprime to   MATH   (see  [7] ). We identify   MATH 
 : [array(['which is', 'which', 'we', 'to math', 'to', 'see', 'math which',
       'math see', 'math', 'is'], dtype='<U24')],
 true: 0, pred: 0
6:  derive the following estimate on   MATH  : MATH  to obtain all the 
 : [array(['to obtain', 'to', 'the following', 'the', 'on math', 'on',
       'obtain', 'math to', 'math math', 'math', 'following estimate',
       'following', 'estimate', 'all the', 'all'], dtype='<U24')],
 true: 0, pred: 0
7:  case  ) as follows (recall that   MATH  ) MATH  By using  (4.6) ,   (4.7) 
 : [array(['using', 'that math', 'that', 'recall that', 'recall', 'math math',
       'math by', 'math', 'follows', 'case', 'by using', 'by',
       'as follows', 'as'], dtype='<U24')],
 true: 0, pred: 0
8:  by  MATH where  MATH  and   MATH   is a generator of   MATH 
 : [array(['where math', 'where', 'of math', 'of', 'math where', 'math is',
       'math and', 'math', 'is', 'by math', 'by', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
9:  MATH  ) denotes the row of   MATH   (resp.  MATH ) indexed by   MATH 
 : [array(['the', 'resp', 'of math', 'of', 'math resp', 'math denotes',
       'math', 'denotes the', 'denotes', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
11:  the background solution  MATH  reads  MATH   where MATH  and the iteration 
 : [array(['where math', 'where', 'the', 'solution math', 'solution',
       'math where', 'math and', 'math', 'and the', 'and'], dtype='<U24')],
 true: 0, pred: 0
12:  -Hölder continuous in  MATH  if   MATH  .
 : [array(['math if', 'math', 'in math', 'in', 'if math', 'if',
       'hölder continuous', 'hölder', 'continuous'], dtype='<U24')],
 true: 0, pred: 0
13:  unit disk. Let  D be  MATH  bounded domain such that  MATH 
 : [array(['unit', 'that math', 'that', 'such that', 'such', 'math bounded',
       'math', 'let be', 'let', 'domain such', 'domain', 'bounded domain',
       'bounded', 'be math', 'be'], dtype='<U24')],
 true: 0, pred: 0
14:  form  MATH  where the form   MATH   is obtained from the natural 
 : [array(['where the', 'where', 'the form', 'the', 'obtained', 'natural',
       'math where', 'math is', 'math', 'is', 'from the', 'from',
       'form math', 'form'], dtype='<U24')],
 true: 0, pred: 0
15:  and  (4.7) , we know that   MATH   and  MATH . Using  (4.5)  , we 
 : [array(['we know', 'we', 'using', 'that math', 'that', 'math using',
       'math and', 'math', 'know that', 'know', 'and we', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
16: Let MATH , for every  MATH  we have MATH
 : [array(['we have', 'we', 'math we', 'math for', 'math', 'let math', 'let',
       'have math', 'have', 'for every', 'for', 'every math', 'every'],
      dtype='<U24')],
 true: 0, pred: 0
17:  solution under sharp assumptions on   MATH   (see  [20, Corollary 1.2]  ). It 
 : [array(['under', 'solution', 'see', 'on math', 'on', 'math see', 'math',
       'it', 'assumptions on', 'assumptions'], dtype='<U24')],
 true: 0, pred: 0
19:  remains to show is when   MATH   . Applying all the conditions to 
 : [array(['when math', 'when', 'to show', 'to', 'the', 'show', 'math', 'is',
       'conditions', 'applying', 'all the', 'all'], dtype='<U24')],
 true: 0, pred: 0
20: Taking the derivative of   MATH   twice, we can get  MATH 
 : [array(['we can', 'we', 'twice we', 'twice', 'the derivative', 'the',
       'taking the', 'taking', 'of math', 'of', 'math twice', 'math',
       'get math', 'get', 'derivative of', 'derivative', 'can get', 'can'],
      dtype='<U24')],
 true: 0, pred: 0
21:  invariant under the rotation of   MATH   and  MATH . Suppose  MATH ,   MATH 
 : [array(['under the', 'under', 'the', 'suppose math', 'suppose', 'of math',
       'of', 'math suppose', 'math math', 'math and', 'math', 'invariant',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
22:  MATH   of  (4.21)  such that  MATH   Indeed, the only difference with 
 : [array(['with', 'the', 'that math', 'that', 'such that', 'such', 'only',
       'of', 'math of', 'math', 'indeed', '21'], dtype='<U24')],
 true: 0, pred: 0
23:  MATH   for any  MATH  and   MATH   . By using the properties of 
 : [array(['using the', 'using', 'the', 'properties', 'of', 'math for',
       'math by', 'math and', 'math', 'for any', 'for', 'by using', 'by',
       'any math', 'any', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
24:  one hand, the first term   MATH   On the other hand, the 
 : [array(['the other', 'the first', 'the', 'term math', 'term', 'other hand',
       'other', 'one', 'on the', 'on', 'math on', 'math', 'hand',
       'first term', 'first'], dtype='<U24')],
 true: 0, pred: 0
26:  to Lemma 4.1, we obtain   MATH   where MATH  with MATH  By 
 : [array(['with math', 'with', 'where math', 'where', 'we obtain', 'we',
       'to', 'obtain math', 'obtain', 'math with', 'math where',
       'math by', 'math', 'lemma we', 'lemma', 'by'], dtype='<U24')],
 true: 0, pred: 0
27:  presented which ensures that operator   MATH   is an isomorphism.
 : [array(['which', 'that', 'operator math', 'operator', 'math is', 'math',
       'isomorphism', 'is an', 'is', 'an'], dtype='<U24')],
 true: 0, pred: 0
28:  be estimated as follows for   MATH  MATH  where  MATH 
 : [array(['where math', 'where', 'math where', 'math math', 'math',
       'for math', 'for', 'follows', 'estimated', 'be', 'as follows',
       'as'], dtype='<U24')],
 true: 0, pred: 0
29: Define  MATH Let   MATH   and  MATH . Since  MATH  is 
 : [array(['since math', 'since', 'math since', 'math let', 'math is',
       'math and', 'math', 'let math', 'let', 'is', 'define math',
       'define', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
30:  A function  MATH  is called   MATH  -Lipschitz, where  MATH , if  MATH 
 : [array(['where math', 'where', 'math lipschitz', 'math is', 'math if',
       'math', 'lipschitz', 'is called', 'is', 'if math', 'if',
       'function math', 'function', 'called'], dtype='<U24')],
 true: 0, pred: 0
31:  conditions of  (6.2)  for each   MATH  .
 : [array(['of', 'math', 'for each', 'for', 'each math', 'each', 'conditions'],
      dtype='<U24')],
 true: 0, pred: 0
33:  for  MATH , we can get  MATH   Therefore all  MATH  except   MATH 
 : [array(['we can', 'we', 'therefore', 'math we', 'math therefore',
       'math except', 'math', 'get math', 'get', 'for math', 'for',
       'except math', 'except', 'can get', 'can', 'all math', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
34:  we consider  Theorem 1.5  for   MATH   and  MATH  and we do 
 : [array(['we consider', 'we', 'theorem', 'math and', 'math', 'for math',
       'for', 'do', 'consider', 'and we', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
35:  denoted as the unknown function):   MATH   MATH 
 : [array(['the', 'math math', 'math', 'function math', 'function', 'denoted',
       'as the', 'as'], dtype='<U24')],
 true: 0, pred: 0
36:  polar coordinates for  MATH  as  MATH   where MATH
 : [array(['where math', 'where', 'polar coordinates', 'polar', 'math where',
       'math as', 'math', 'for math', 'for', 'coordinates for',
       'coordinates', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
37:  involution  MATH  from  MATH  to   MATH   is called  Fricke involution .
 : [array(['to math', 'to', 'math to', 'math is', 'math from', 'math',
       'is called', 'is', 'involution math', 'involution', 'from math',
       'from', 'called'], dtype='<U24')],
 true: 0, pred: 0
38:  a double layer potential, where   MATH   with  MATH  acting on the 
 : [array(['with math', 'with', 'where math', 'where', 'the', 'potential',
       'on the', 'on', 'math with', 'math', 'layer potential', 'layer',
       'double layer', 'double'], dtype='<U24')],
 true: 0, pred: 0
39:  A   on the shock polar,  MATH   while, for the weak transonic 
 : [array(['while', 'weak transonic', 'weak', 'transonic', 'the weak',
       'the shock', 'the', 'shock polar', 'shock', 'polar', 'on the',
       'on', 'math while', 'math', 'for the', 'for'], dtype='<U24')],
 true: 1, pred: 1
40:  By  (4.6)  it follows that   MATH  , and hence  MATH  , which contradicts 
 : [array(['which contradicts', 'which', 'that math', 'that', 'math which',
       'math and', 'math', 'it follows', 'it', 'hence math', 'hence',
       'follows that', 'follows', 'contradicts', 'by', 'and hence', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
41:  the shock-front, which yields that   MATH   on the edge, by condition 
 : [array(['yields that', 'yields', 'which', 'the shock', 'the', 'that math',
       'that', 'shock front', 'shock', 'on the', 'on', 'math on', 'math',
       'front', 'edge', 'condition', 'by'], dtype='<U24')],
 true: 0, pred: 0
42:  called the (Jacobian) generators of   MATH   . We also note that a 
 : [array(['we also', 'we', 'the jacobian', 'the', 'that', 'of math', 'of',
       'note that', 'note', 'math we', 'math', 'jacobian', 'called the',
       'called', 'also'], dtype='<U24')],
 true: 0, pred: 0
43:  the minimum point  P of  MATH  , then MATH  has nonnegative scalar 
 : [array(['then math', 'then', 'the minimum', 'the', 'scalar', 'point of',
       'point', 'of math', 'of', 'nonnegative', 'minimum', 'math then',
       'math has', 'math', 'has'], dtype='<U24')],
 true: 0, pred: 0
44:  the rotation of  MATH  and   MATH  . Suppose  MATH ,  MATH  , then by 
 : [array(['then by', 'then', 'the', 'suppose math', 'suppose', 'of math',
       'of', 'math then', 'math suppose', 'math math', 'math and', 'math',
       'by', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
47:  can be written as  MATH  MATH   Condition  (2.1)  indicates the conservation 
 : [array(['the', 'math math', 'math', 'indicates', 'condition', 'can be',
       'can', 'be', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
48:  as above, we can get   MATH   Therefore  MATH  follows from   MATH 
 : [array(['we can', 'we', 'therefore math', 'therefore', 'math therefore',
       'math', 'get math', 'get', 'from math', 'from', 'follows from',
       'follows', 'can get', 'can', 'as above', 'as', 'above we', 'above'],
      dtype='<U24')],
 true: 0, pred: 0
49:  Theorem 1  , we know that   MATH  . Recall that  MATH , where   MATH 
 : [array(['where math', 'where', 'we know', 'we', 'theorem', 'that math',
       'that', 'recall that', 'recall', 'math where', 'math recall',
       'math', 'know that', 'know'], dtype='<U24')],
 true: 0, pred: 0
51:  -derivatives, i.e.  MATH  for every   MATH   . The proof relies on differentiating 
 : [array(['the proof', 'the', 'proof', 'on', 'math the', 'math for', 'math',
       'for every', 'for', 'every math', 'every', 'derivatives'],
      dtype='<U24')],
 true: 0, pred: 0
52:  for all  MATH , we have  MATH   In particular, that implies  MATH 
 : [array(['we have', 'we', 'that', 'particular', 'math we', 'math in',
       'math', 'in particular', 'in', 'implies math', 'implies',
       'have math', 'have', 'for all', 'for', 'all math', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
53: With this choice of   MATH  , we have  MATH MATH  on 
 : [array(['with', 'we have', 'we', 'this', 'on', 'of math', 'of', 'math we',
       'math on', 'math math', 'math', 'have math', 'have', 'choice'],
      dtype='<U24')],
 true: 0, pred: 0
54:  term tends to zero when   MATH   . Now it is left to 
 : [array(['zero', 'when math', 'when', 'to', 'term', 'now', 'math now',
       'math', 'left', 'it is', 'it', 'is'], dtype='<U24')],
 true: 0, pred: 0
55:  for  a possibly different constant  MATH  : •if(3.20)sup0<|h|<h0⁡‖δhu|h|Γ‖Lp(Br)p≤Cs(1−Γ)p(Rr)N(Rh0)1+p[(1−s)Mγ+h0−Γp‖u‖Lp(BR+h0)p];•iffor every0<τ<1(3.21)sup0<|h|<h0⁡‖δhu|h|τ‖Lp(Br)p≤C(1−τ)p(Rr)N(Rh0)1+p[(1−s)Mγ+h0−p‖u‖Lp(BR+h0)p];•if(3.22)‖∇u‖Lp(Br)p≤C(Γ−1)p(Rr)N(Rh0)1+p[(1−s)Mγ+h0−Γp‖u‖Lp(BR+h0)p],and for every0<τ<Γ−1(3.23)[∇u]Wτ,p(Br)p≤C(R/r)N(Γ−1−τ)τ(Rh0)1+p(h0−τ(2−Γ)(Γ−1))p[(1−s)Mγ+h0−Γp‖u‖Lp(BR+h0)p].
 : [array(['math if', 'math', 'if', 'for', 'different', 'constant math',
       'constant', 'and for', 'and', '23', '22', '21'], dtype='<U24')],
 true: 0, pred: 0
56:  of  MATH  onto  MATH  and   MATH   for every  MATH .
 : [array(['onto math', 'onto', 'of math', 'of', 'math onto', 'math for',
       'math and', 'math', 'for every', 'for', 'every math', 'every',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
57:  (3.16)   we obtain MATH  Therefore,  MATH   that is,  MATH . □
 : [array(['we obtain', 'we', 'therefore math', 'therefore', 'that is',
       'that', 'obtain math', 'obtain', 'math therefore', 'math that',
       'math', 'is math', 'is', '16'], dtype='<U24')],
 true: 0, pred: 0
58: Step 6:  MATH 
 : [array(['step math', 'step', 'math'], dtype='<U24')],
 true: 0, pred: 0
59:  we denote its inverse by   MATH   Taking the partial derivatives to 
 : [array(['we denote', 'we', 'to', 'the partial', 'the', 'taking the',
       'taking', 'partial', 'math taking', 'math', 'its inverse', 'its',
       'inverse', 'derivatives', 'denote', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
60:  we consider the rescaled functions   MATH   then  MATH  and by   (1.5) 
 : [array(['we consider', 'we', 'then math', 'then', 'the', 'math then',
       'math and', 'math', 'functions math', 'functions', 'consider the',
       'consider', 'by', 'and by', 'and'], dtype='<U24')],
 true: 0, pred: 0
61:  Thus  MATH . Hence  MATH  with   MATH   are roots of  (5.3) .
 : [array(['with math', 'with', 'thus math', 'thus', 'roots of', 'roots',
       'of', 'math with', 'math hence', 'math are', 'math', 'hence math',
       'hence', 'are roots', 'are'], dtype='<U24')],
 true: 0, pred: 0
62:  Lopatinskii determinant is not zero,   MATH   is invertible and the matrix 
 : [array(['zero', 'the matrix', 'the', 'not', 'matrix', 'math is', 'math',
       'lopatinskii determinant', 'lopatinskii', 'is not',
       'is invertible', 'is', 'invertible', 'determinant', 'and the',
       'and'], dtype='<U24')],
 true: 0, pred: 0
64:  MATH  . Recall that  MATH , where   MATH   and  MATH  for every pair 
 : [array(['where math', 'where', 'that math', 'that', 'recall that',
       'recall', 'pair', 'math where', 'math recall', 'math for',
       'math and', 'math', 'for every', 'for', 'every pair', 'every',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
65: For the points   MATH   where the Lopatinskii determinant is 
 : [array(['where the', 'where', 'the points', 'the lopatinskii', 'the',
       'points math', 'points', 'math where', 'math',
       'lopatinskii determinant', 'lopatinskii', 'is', 'for the', 'for',
       'determinant'], dtype='<U24')],
 true: 1, pred: 1
66:  to (recall  (4.12)  for  MATH )  MATH   By scaling back we get 
 : [array(['we get', 'we', 'to', 'recall', 'math math', 'math by', 'math',
       'get', 'for math', 'for', 'by', '12'], dtype='<U24')],
 true: 0, pred: 0
67:  uniqueness, as well as the   MATH  priori  estimates, of a solution 
 : [array(['well', 'uniqueness', 'the math', 'the', 'solution', 'of', 'math',
       'estimates of', 'estimates', 'as the', 'as'], dtype='<U24')],
 true: 0, pred: 0
68:  -Lipschitz weak homeomorphism such that   MATH  . By using  Lemma 2  , we 
 : [array(['weak', 'we', 'using lemma', 'using', 'that math', 'that',
       'such that', 'such', 'math by', 'math', 'lipschitz', 'lemma we',
       'lemma', 'homeomorphism', 'by using', 'by'], dtype='<U24')],
 true: 0, pred: 0
69:  MATH   (resp.  MATH ) indexed by   MATH   . For example, for a prime 
 : [array(['resp', 'prime', 'math resp', 'math for', 'math', 'for example',
       'for', 'example', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
70:  Let  MATH  where MATH  with  MATH   Then equation  (8.1)  becomes  MATH 
 : [array(['with math', 'with', 'where math', 'where', 'then equation',
       'then', 'math with', 'math where', 'math then', 'math', 'let math',
       'let', 'equation becomes', 'equation', 'becomes math', 'becomes'],
      dtype='<U24')],
 true: 0, pred: 0
71:  obtain the following differentiation formula   MATH   where MATH  That is  MATH 
 : [array(['where math', 'where', 'the following', 'the', 'that is', 'that',
       'obtain the', 'obtain', 'math where', 'math that', 'math',
       'is math', 'is', 'formula math', 'formula', 'following',
       'differentiation'], dtype='<U24')],
 true: 0, pred: 0
72:  closed Willmore minimal hypersurface in   MATH   with constant scalar curvature, and 
 : [array(['with constant', 'with', 'willmore', 'scalar curvature', 'scalar',
       'minimal hypersurface', 'minimal', 'math with', 'math', 'in math',
       'in', 'hypersurface in', 'hypersurface', 'curvature',
       'constant scalar', 'constant', 'closed', 'and'], dtype='<U24')],
 true: 0, pred: 0
74:  MATH   with the weight enumerator   MATH  .
 : [array(['with the', 'with', 'weight enumerator', 'weight', 'the weight',
       'the', 'math with', 'math', 'enumerator math', 'enumerator'],
      dtype='<U24')],
 true: 0, pred: 0
75:  obtain  MATH ,  MATH ,  MATH  and   MATH  , for  MATH  . Therefore for a 
 : [array(['therefore', 'obtain math', 'obtain', 'math therefore',
       'math math', 'math for', 'math and', 'math', 'for math', 'for',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
76:  by  MATH  We note that   MATH   and  MATH  are equivalent to 
 : [array(['we', 'to', 'that math', 'that', 'note that', 'note', 'math we',
       'math are', 'math and', 'math', 'equivalent to', 'equivalent',
       'by math', 'by', 'are equivalent', 'are', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
77:  MATH   as in  Fig. 4.1  :  MATH   Then  MATH  is a domain 
 : [array(['then math', 'then', 'math then', 'math is', 'math as', 'math',
       'is', 'in', 'fig', 'domain', 'as in', 'as'], dtype='<U24')],
 true: 0, pred: 0
78:  represented by point  A , and   MATH   when point  A  coincides with 
 : [array(['with', 'when', 'represented by', 'represented', 'point',
       'math when', 'math', 'coincides with', 'coincides', 'by point',
       'by', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
79: (iii)  if MATH and  MATH   is even, then we have 
 : [array(['we have', 'we', 'then we', 'then', 'math is', 'math and', 'math',
       'is even', 'is', 'iii if', 'iii', 'if math', 'if', 'have',
       'even then', 'even', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
80:  issues in the estimates of   MATH   is to bound the components 
 : [array(['to', 'the estimates', 'the components', 'the', 'of math', 'of',
       'math is', 'math', 'is to', 'is', 'in the', 'in', 'estimates of',
       'estimates', 'components', 'bound'], dtype='<U24')],
 true: 0, pred: 0
81:  the nonlocal terms  MATH  and   MATH   in the right-hand side   (3.3) 
 : [array(['the right', 'the', 'terms math', 'terms', 'side', 'right hand',
       'right', 'nonlocal', 'math in', 'math and', 'math', 'in the', 'in',
       'hand side', 'hand', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
84: Step 3:  MATH 
 : [array(['step math', 'step', 'math'], dtype='<U24')],
 true: 0, pred: 0
85:  local Hardy inequality is valid   MATH  where d is the  MATH 
 : [array(['where is', 'where', 'valid', 'the math', 'the', 'math where',
       'math', 'local', 'is the', 'is', 'inequality', 'hardy inequality',
       'hardy'], dtype='<U24')],
 true: 0, pred: 0
86:  Since  η  is non-zero on   MATH  , the eta quotient  f  is 
 : [array(['zero', 'the eta', 'the', 'since', 'quotient', 'on math', 'on',
       'non', 'math the', 'math', 'is', 'eta quotient', 'eta'],
      dtype='<U24')],
 true: 0, pred: 0
87:  the above four equations and   MATH   for  MATH  , we can get 
 : [array(['we can', 'we', 'the above', 'the', 'math we', 'math for', 'math',
       'get', 'four', 'for math', 'for', 'equations', 'can get', 'can',
       'and math', 'and', 'above'], dtype='<U24')],
 true: 0, pred: 0
88:  Let  MATH and MATH then  MATH 
 : [array(['then math', 'then', 'math then', 'math and', 'math', 'let math',
       'let', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
89:  of the interior values of   MATH   . This way, we can still 
 : [array(['we can', 'we', 'values', 'this', 'the', 'still', 'of the',
       'of math', 'of', 'math this', 'math', 'interior', 'can'],
      dtype='<U24')],
 true: 0, pred: 0
91:  the above equalities, we get   MATH 
 : [array(['we get', 'we', 'the above', 'the', 'math', 'get math', 'get',
       'equalities we', 'equalities', 'above equalities', 'above'],
      dtype='<U24')],
 true: 0, pred: 0
93:  the other two components of   MATH  , i.e.  MATH  , which are in 
 : [array(['which', 'two', 'the other', 'the', 'other', 'of math', 'of',
       'math which', 'math math', 'math', 'in', 'components of',
       'components', 'are'], dtype='<U24')],
 true: 0, pred: 0
95:  we have  MATH  MATH 
 : [array(['we have', 'we', 'math math', 'math', 'have math', 'have'],
      dtype='<U24')],
 true: 0, pred: 0
96:  and  MATH with MATH when  MATH  with MATH and MATH  , there 
 : [array(['with math', 'with', 'when math', 'when', 'there', 'math with',
       'math when', 'math there', 'math and', 'math', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
98:  and  MATH . Therefore  MATH  and   MATH   are purely imaginary, and  MATH 
 : [array(['therefore math', 'therefore', 'purely imaginary', 'purely',
       'math therefore', 'math are', 'math and', 'math', 'imaginary',
       'are', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
99:  positive component of  MATH , i.e.   MATH  .
 : [array(['positive', 'of math', 'of', 'math math', 'math', 'component'],
      dtype='<U24')],
 true: 0, pred: 0
100:  we get  MATH  Furthermore, when   MATH  , we have MATH  Combining   (3.31) 
 : [array(['when math', 'when', 'we have', 'we get', 'we', 'math we',
       'math furthermore', 'math combining', 'math', 'have math', 'have',
       'get math', 'get', 'furthermore', 'combining'], dtype='<U24')],
 true: 0, pred: 0
101:  MATH  MATH  where   MATH   with  MATH  , the unit sphere 
 : [array(['with math', 'with', 'where math', 'where', 'unit sphere', 'unit',
       'the unit', 'the', 'sphere', 'math with', 'math where', 'math the',
       'math math', 'math'], dtype='<U24')],
 true: 0, pred: 0
102:  being the sonic speed. Denote   MATH  .
 : [array(['the', 'math', 'denote math', 'denote'], dtype='<U24')],
 true: 0, pred: 0
103:  are going to show that   MATH   converges uniformly to  MATH  . In 
 : [array(['uniformly to', 'uniformly', 'to show', 'to math', 'to',
       'that math', 'that', 'show that', 'show', 'math in',
       'math converges', 'math', 'in', 'going', 'converges uniformly',
       'converges', 'are'], dtype='<U24')],
 true: 0, pred: 0
104: Suppose that  MATH  satisfies (A.14) . Then operator  MATH 
 : [array(['then', 'that math', 'that', 'suppose that', 'suppose',
       'satisfies', 'operator math', 'operator', 'math satisfies', 'math',
       '14'], dtype='<U24')],
 true: 0, pred: 0
105:  Thus, the tangential derivatives of   MATH   on the edge should be 
 : [array(['thus the', 'thus', 'the', 'should be', 'should', 'on the', 'on',
       'of math', 'of', 'math on', 'math', 'edge', 'derivatives of',
       'derivatives', 'be'], dtype='<U24')],
 true: 0, pred: 0
106:  in  (4.13)  is void when   MATH   . Without loss of generality, we 
 : [array(['without loss', 'without', 'when math', 'when', 'we',
       'of generality', 'of', 'math', 'loss of', 'loss', 'is', 'in',
       'generality we', 'generality', '13'], dtype='<U24')],
 true: 0, pred: 0
108: (i)  if  MATH  , then we have MATH
 : [array(['we have', 'we', 'then we', 'then', 'math then', 'math', 'if math',
       'if', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
109:  has a unique fundamental solution   MATH   on  MATH , see  (3.1)  , given 
 : [array(['unique', 'solution math', 'solution', 'see', 'on math', 'on',
       'math see', 'math on', 'math', 'has unique', 'has', 'given',
       'fundamental solution', 'fundamental'], dtype='<U24')],
 true: 0, pred: 0
110:  MATH  . Since  MATH  we have  MATH   Thus  MATH  is a dominant 
 : [array(['we have', 'we', 'thus math', 'thus', 'since math', 'since',
       'math we', 'math thus', 'math since', 'math is', 'math', 'is',
       'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
111:  MATH  MATH MATH MATH where   MATH   denotes the jump of the 
 : [array(['where math', 'where', 'the', 'of the', 'of', 'math where',
       'math math', 'math denotes', 'math', 'jump', 'denotes the',
       'denotes'], dtype='<U24')],
 true: 0, pred: 0
112:    Let  MATH ,  MATH ,  MATH ,   MATH   and  MATH  . Then the linear 
 : [array(['then the', 'then', 'the linear', 'the', 'math then', 'math math',
       'math and', 'math', 'linear', 'let math', 'let', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
113:  that  MATH  is undefined at   MATH  . Moreover MATH  On the other 
 : [array(['the other', 'the', 'that math', 'that', 'other', 'on the', 'on',
       'moreover', 'math on', 'math moreover', 'math is', 'math', 'is',
       'at math', 'at'], dtype='<U24')],
 true: 0, pred: 0
114:  γ  is Dini smooth, and  MATH   is modulus of continuity of 
 : [array(['smooth', 'of continuity', 'of', 'modulus', 'math is', 'math',
       'is', 'dini smooth', 'dini', 'continuity of', 'continuity',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
115:  find a  MATH  Hermitian matrix   MATH   and a number  MATH  such 
 : [array(['such', 'number math', 'number', 'matrix math', 'matrix',
       'math such', 'math and', 'math', 'find', 'and'], dtype='<U24')],
 true: 1, pred: 1
116:  MATH   denotes the rescaling of   MATH   by  d  . Clearly, the level 
 : [array(['the rescaling', 'the level', 'the', 'rescaling of', 'rescaling',
       'of math', 'of', 'math denotes', 'math by', 'math', 'level',
       'denotes the', 'denotes', 'clearly', 'by'], dtype='<U24')],
 true: 0, pred: 0
117:  For a Lipschitz non-decreasing function   MATH   and an arc-length parametrization   g 
 : [array(['non', 'math and', 'math', 'lipschitz', 'length', 'function math',
       'function', 'for', 'decreasing function', 'decreasing', 'and',
       'an'], dtype='<U24')],
 true: 1, pred: 1
118:  in the  q -expansion of   MATH   at the cusp  s  , where 
 : [array(['where', 'the', 'of math', 'of', 'math at', 'math', 'in the', 'in',
       'at the', 'at'], dtype='<U24')],
 true: 0, pred: 0
119:  MATH   are purely imaginary and   MATH   have opposite signs to   MATH 
 : [array(['to math', 'to', 'signs', 'purely imaginary', 'purely', 'opposite',
       'math have', 'math are', 'math', 'imaginary', 'have', 'are',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
120:  without loss of generality that   MATH  . Use the notation MATH  On 
 : [array(['without loss', 'without', 'use the', 'use', 'the notation', 'the',
       'that math', 'that', 'on', 'of generality', 'of', 'notation math',
       'notation', 'math on', 'math', 'loss of', 'loss', 'generality'],
      dtype='<U24')],
 true: 0, pred: 0
122:  is  a Niho exponent and  MATH  .
 : [array(['niho', 'math', 'is', 'exponent', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
124: Letting  MATH , we have  MATH   which is equivalent to  MATH 
 : [array(['which is', 'which', 'we have', 'we', 'to math', 'to',
       'math which', 'math we', 'math', 'letting math', 'letting',
       'is equivalent', 'is', 'have math', 'have', 'equivalent to',
       'equivalent'], dtype='<U24')],
 true: 0, pred: 0
125:  a basis of  MATH  over   MATH   and  MATH  be a basis 
 : [array(['over math', 'over', 'of math', 'of', 'math over', 'math be',
       'math and', 'math', 'be basis', 'be', 'basis of', 'basis',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
126:  and  MATH  (or  MATH  and   MATH   ) become parallel at those points. 
 : [array(['those', 'points', 'or math', 'or', 'math or', 'math become',
       'math and', 'math', 'become', 'at', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
127:  are opposite to those of   MATH  , which implies  MATH . Hence   MATH 
 : [array(['which implies', 'which', 'to', 'those', 'opposite to', 'opposite',
       'of math', 'of', 'math which', 'math hence', 'math',
       'implies math', 'implies', 'hence math', 'hence', 'are'],
      dtype='<U24')],
 true: 0, pred: 0
128:  only finitely many possibilities for   MATH   , the space of modular forms 
 : [array(['the space', 'the', 'space of', 'space', 'only finitely', 'only',
       'of', 'modular', 'math the', 'math', 'many', 'forms', 'for math',
       'for', 'finitely many', 'finitely'], dtype='<U24')],
 true: 0, pred: 0
129:  MATH   is univalent, providing that   MATH   is a surjective mapping.
 : [array(['univalent', 'that math', 'that', 'surjective', 'math is', 'math',
       'mapping', 'is'], dtype='<U24')],
 true: 1, pred: 1
130:  mapping  MATH  is well-defined in   MATH   . This completes the proof.  
 : [array(['well', 'this', 'the proof', 'the', 'proof', 'math this',
       'math is', 'math', 'mapping math', 'mapping', 'is', 'in math',
       'in', 'defined in', 'defined'], dtype='<U24')],
 true: 0, pred: 0
131:  improved the above theorem from   MATH   to  MATH  . And then Q. 
 : [array(['to math', 'to', 'theorem', 'then', 'the above', 'the', 'math to',
       'math and', 'math', 'from math', 'from', 'and then', 'and',
       'above'], dtype='<U24')],
 true: 0, pred: 0
132:  where  MATH  ( MATH  and  MATH ),   MATH  , and MATH  Then we have 
 : [array(['where math', 'where', 'we have', 'we', 'then we', 'then',
       'math then', 'math math', 'math and', 'math', 'have', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
133:  Let  MATH ,  MATH ,  MATH  and   MATH  . Then the linear code   MATH 
 : [array(['then the', 'then', 'the linear', 'the', 'math then', 'math math',
       'math and', 'math', 'linear code', 'linear', 'let math', 'let',
       'code math', 'code', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
136:  and  MATH . Let MATH and  MATH   be two positive integers with 
 : [array(['with', 'two positive', 'two', 'positive integers', 'positive',
       'math let', 'math be', 'math and', 'math', 'let math', 'let',
       'integers with', 'integers', 'be two', 'be', 'and math', 'and'],
      dtype='<U24')],
 true: 1, pred: 1
137:  the following convolution  MATH , where   MATH  , and  ρ  is a smooth 
 : [array(['where math', 'where', 'the following', 'the', 'smooth',
       'math where', 'math and', 'math', 'is', 'following', 'and is',
       'and'], dtype='<U24')],
 true: 0, pred: 0
138:  holds  MATH for a constant  MATH  .
 : [array(['math for', 'math', 'holds math', 'holds', 'for', 'constant math',
       'constant'], dtype='<U24')],
 true: 0, pred: 0
139: Let  MATH  , for every MATH  we have 
 : [array(['we have', 'we', 'math we', 'math for', 'math', 'let math', 'let',
       'have', 'for every', 'for', 'every math', 'every'], dtype='<U24')],
 true: 0, pred: 0
140:  is a weak homeomorphism, if   MATH   is a nondecreasing surjective function. 
 : [array(['weak', 'surjective function', 'surjective', 'math is', 'math',
       'is', 'if math', 'if', 'homeomorphism', 'function'], dtype='<U24')],
 true: 1, pred: 1
141:  Hence for the fixed directions   MATH   and  MATH ,  (3.11)  is equivalent 
 : [array(['the fixed', 'the', 'math and', 'math', 'is equivalent', 'is',
       'hence', 'for the', 'for', 'fixed', 'equivalent',
       'directions math', 'directions', 'and math', 'and', '11'],
      dtype='<U24')],
 true: 1, pred: 1
142:  that the outgoing modes of   MATH   vanish in the entire   MATH 
 : [array(['vanish', 'the', 'that the', 'that', 'of math', 'of', 'modes',
       'math', 'in the', 'in'], dtype='<U24')],
 true: 0, pred: 0
143:  solution such that, for any   MATH  if MATH with MATH  and 
 : [array(['with math', 'with', 'that for', 'that', 'such that', 'such',
       'solution', 'math with', 'math if', 'math and', 'math', 'if math',
       'if', 'for any', 'for', 'any math', 'any', 'and'], dtype='<U24')],
 true: 0, pred: 0
145:  σ  satisfies condition (A.19) and  MATH   . Then the operator of the 
 : [array(['then the', 'then', 'the operator', 'the', 'satisfies', 'operator',
       'of the', 'of', 'math then', 'math', 'condition', 'and math',
       'and', '19'], dtype='<U24')],
 true: 0, pred: 0
146:  MATH  , and  MATH  with  MATH ,   MATH  ,  MATH  the inward normal of 
 : [array(['with math', 'with', 'the', 'of', 'normal', 'math with',
       'math the', 'math math', 'math and', 'math', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
147:  as in our elasticity model,   MATH   and  MATH  may blow up 
 : [array(['up', 'our', 'may', 'math may', 'math and', 'math', 'in', 'as in',
       'as', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
149:  equation  (6.1)  becomes MATH  where   MATH  . The boundaries  MATH  and   MATH 
 : [array(['where math', 'where', 'the boundaries', 'the', 'math where',
       'math the', 'math and', 'math', 'equation becomes', 'equation',
       'boundaries math', 'boundaries', 'becomes math', 'becomes',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
150:  derivatives should be zero, i.e.   MATH   Letting  MATH  and  MATH  , we 
 : [array(['zero', 'we', 'should be', 'should', 'math we', 'math and', 'math',
       'letting math', 'letting', 'derivatives', 'be', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
151: (iii)  If MATH and  MATH   is even, then the code 
 : [array(['then the', 'then', 'the code', 'the', 'math is', 'math and',
       'math', 'is even', 'is', 'iii if', 'iii', 'if math', 'if',
       'even then', 'even', 'code', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
152:  also established: if  MATH , then  MATH   see  Proposition 3.10  . As a 
 : [array(['then math', 'then', 'see proposition', 'see', 'proposition',
       'math then', 'math see', 'math', 'if math', 'if', 'established',
       'as', 'also', '10'], dtype='<U24')],
 true: 0, pred: 0
153:  multiplicity of the root when   MATH   under the condition  MATH  or 
 : [array(['when math', 'when', 'under the', 'under', 'the condition', 'the',
       'root', 'or', 'of the', 'of', 'math under', 'math or', 'math',
       'condition math', 'condition'], dtype='<U24')],
 true: 0, pred: 0
154:  by  MATH  where   MATH   (resp.  MATH  ) denotes the row 
 : [array(['where math', 'where', 'the', 'resp', 'math where', 'math resp',
       'math denotes', 'math', 'denotes the', 'denotes', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
155:  MATH   (see  Fig. 3.1 ). Taking   MATH  , equation  (6.1)  becomes MATH  where 
 : [array(['where', 'taking math', 'taking', 'see fig', 'see', 'math where',
       'math see', 'math equation', 'math', 'fig', 'equation becomes',
       'equation', 'becomes math', 'becomes'], dtype='<U24')],
 true: 0, pred: 0
156:  a basis of  MATH  over   MATH   and  MATH  is a basis 
 : [array(['over math', 'over', 'of math', 'of', 'math over', 'math is',
       'math and', 'math', 'is basis', 'is', 'basis of', 'basis',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
157:  MATH  ,  MATH ,  MATH ,  MATH  and   MATH  . Then the linear code   MATH 
 : [array(['then the', 'then', 'the linear', 'the', 'math then', 'math math',
       'math and', 'math', 'linear code', 'linear', 'code math', 'code',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
158:  (2.17)  , we get MATH  and  MATH   Again from  (2.16) ,  (2.17)  and 
 : [array(['we get', 'we', 'math and', 'math', 'get math', 'get', 'from',
       'and math', 'and', 'again', '17', '16'], dtype='<U24')],
 true: 0, pred: 0
159:  largest among these subgroups is   MATH   where  MATH  We call   N 
 : [array(['where math', 'where', 'we call', 'we', 'these', 'math where',
       'math we', 'math', 'is math', 'is', 'call'], dtype='<U24')],
 true: 0, pred: 0
160:  obtain  MATH . Thus  MATH  and   MATH  . From  (4.8) , we obtain   MATH 
 : [array(['we obtain', 'we', 'thus math', 'thus', 'obtain math', 'obtain',
       'math thus', 'math from', 'math and', 'math', 'from we', 'from',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
161:  Niho exponent and  MATH where   MATH  . Using  Lemma 6  , we have 
 : [array(['where math', 'where', 'we have', 'we', 'using lemma', 'using',
       'niho', 'math where', 'math using', 'math', 'lemma we', 'lemma',
       'have', 'exponent', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
162:  obtain the full estimate on   MATH   one has to utilize the 
 : [array(['to', 'the', 'one', 'on math', 'on', 'obtain the', 'obtain',
       'math one', 'math', 'has', 'estimate'], dtype='<U24')],
 true: 0, pred: 0
163:  shock solution represented by point   MATH   on the shock polar,  MATH 
 : [array(['the shock', 'the', 'solution represented', 'solution',
       'shock solution', 'shock polar', 'shock', 'represented by',
       'represented', 'polar', 'point math', 'point', 'on the', 'on',
       'math on', 'math', 'by point', 'by'], dtype='<U24')],
 true: 1, pred: 1
165:  additive character of  MATH , where   MATH  . The character  MATH  in   (6) 
 : [array(['where math', 'where', 'the', 'of math', 'of', 'math where',
       'math the', 'math in', 'math', 'in', 'character of',
       'character math', 'character', 'additive character', 'additive'],
      dtype='<U24')],
 true: 0, pred: 0
166:  [2]  )  Let H, K and  MATH   be the mean curvature, the 
 : [array(['the mean', 'the', 'mean curvature', 'mean', 'math be', 'math',
       'let', 'curvature', 'be the', 'be', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
167:  takes the form  MATH  where   MATH   is a  MATH  -homogeneous polynomial 
 : [array(['where math', 'where', 'the form', 'the', 'polynomial',
       'math where', 'math is', 'math', 'is math', 'is',
       'homogeneous polynomial', 'homogeneous', 'form math', 'form'],
      dtype='<U24')],
 true: 1, pred: 1
168:  a basis of  MATH  over   MATH  . We extend  MATH  to   MATH 
 : [array(['we extend', 'we', 'to math', 'to', 'over math', 'over', 'of math',
       'of', 'math we', 'math to', 'math over', 'math', 'extend math',
       'extend', 'basis of', 'basis'], dtype='<U24')],
 true: 0, pred: 0
169:  those of  MATH , respectively. Hence  MATH   Therefore  MATH , and  MATH  with 
 : [array(['with', 'those', 'therefore math', 'therefore', 'respectively',
       'of math', 'of', 'math with', 'math therefore',
       'math respectively', 'math and', 'math', 'hence math', 'hence',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
170:  as the integer-valued function on   MATH   , whose value at each element 
 : [array(['value', 'the', 'on math', 'on', 'math', 'integer', 'function on',
       'function', 'element', 'each', 'at', 'as the', 'as'], dtype='<U24')],
 true: 0, pred: 0
171:  with indices in  I . For   MATH   and  MATH , by  MATH  we 
 : [array(['with', 'we', 'math we', 'math by', 'math and', 'math', 'in',
       'for math', 'for', 'by math', 'by', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
172:  the following differential equations for   MATH   only: MATH  where MATH  and 
 : [array(['where math', 'where', 'the following', 'the', 'only',
       'math where', 'math only', 'math and', 'math', 'for math', 'for',
       'following', 'equations', 'differential', 'and'], dtype='<U24')],
 true: 0, pred: 0
173:  of  S  may be 2  MATH  . In  [13]  , C.K. Peng and 
 : [array(['of', 'may', 'math in', 'math', 'in', 'be math', 'be', 'and', '13'],
      dtype='<U24')],
 true: 0, pred: 0
174:  and  MATH  become MATH  where  MATH   The boundary condition  (8.2)  becomes 
 : [array(['where math', 'where', 'the boundary', 'the', 'math where',
       'math the', 'math become', 'math', 'condition becomes',
       'condition', 'boundary condition', 'boundary', 'becomes',
       'become math', 'become', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
175:  Notice that the intrinsic property   MATH   holds at any time throughout 
 : [array(['the', 'that the', 'that', 'property', 'notice that', 'notice',
       'math', 'holds', 'at', 'any'], dtype='<U24')],
 true: 0, pred: 0
176:  MATH  , we want to show  MATH 
 : [array(['we want', 'we', 'want', 'to show', 'to', 'show', 'math we',
       'math'], dtype='<U24')],
 true: 0, pred: 0
177: If   MATH   , then by the same argument 
 : [array(['then by', 'then', 'the same', 'the', 'same', 'math then', 'math',
       'if math', 'if', 'by the', 'by', 'argument'], dtype='<U24')],
 true: 0, pred: 0
180:  MATH  . By  (4.7) , we have   MATH  . From  (5.11)  and using the 
 : [array(['we have', 'we', 'using the', 'using', 'the', 'math from',
       'math by', 'math', 'have math', 'have', 'from', 'by we', 'by',
       'and', '11'], dtype='<U24')],
 true: 0, pred: 0
181:  a  closed minimal hypersurface in  MATH  with S  =  constant. If  MATH 
 : [array(['with constant', 'with', 'minimal hypersurface', 'minimal',
       'math with', 'math', 'in math', 'in', 'if math', 'if',
       'hypersurface in', 'hypersurface', 'constant if', 'constant',
       'closed minimal', 'closed'], dtype='<U24')],
 true: 0, pred: 0
183:  solution  u  of  (1.2)  verifies  MATH   for every  MATH  with compact 
 : [array(['with', 'solution of', 'solution', 'of', 'math with', 'math for',
       'math', 'for every', 'for', 'every math', 'every'], dtype='<U24')],
 true: 0, pred: 0
184:  MATH  . The weight enumerator of   MATH   is defined by  MATH  The 
 : [array(['weight enumerator', 'weight', 'the weight', 'the', 'of math',
       'of', 'math the', 'math is', 'math', 'is defined', 'is',
       'enumerator', 'defined by', 'defined', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
186:  all primes  MATH , we have  MATH   where  MATH  the highest number 
 : [array(['where math', 'where', 'we have', 'we', 'the', 'primes', 'number',
       'math where', 'math we', 'math the', 'math', 'have math', 'have',
       'all'], dtype='<U24')],
 true: 0, pred: 0
187:  the level of  MATH  divides   MATH  . In other words,  MATH  transforms 
 : [array(['the level', 'the', 'other', 'of math', 'of', 'math in', 'math',
       'level', 'in', 'divides'], dtype='<U24')],
 true: 0, pred: 0
188:  and  MATH  become MATH  where  MATH   The boundary condition  (6.2)  becomes 
 : [array(['where math', 'where', 'the boundary', 'the', 'math where',
       'math the', 'math become', 'math', 'condition becomes',
       'condition', 'boundary condition', 'boundary', 'becomes',
       'become math', 'become', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
189:  first done for the case   MATH   by Kassmann in  [17]  . In 
 : [array(['the case', 'the', 'math by', 'math', 'in', 'for the', 'for',
       'first', 'case math', 'case', 'by', '17'], dtype='<U24')],
 true: 0, pred: 0
190:  theorem (see  [8] ) states that   MATH   . Hence, from Mertens' theorem (see 
 : [array(['theorem', 'that math', 'that', 'see', 'math hence', 'math',
       'hence from', 'hence', 'from'], dtype='<U24')],
 true: 0, pred: 0
191:  MATH  ,  MATH ,  MATH ,  MATH  and   MATH  . Then the linear code   MATH 
 : [array(['then the', 'then', 'the linear', 'the', 'math then', 'math math',
       'math and', 'math', 'linear code', 'linear', 'code math', 'code',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
192:  Let  MATH and MATH . Let  MATH   be an open and bounded 
 : [array(['open', 'math let', 'math be', 'math and', 'math', 'let math',
       'let', 'bounded', 'be an', 'be', 'and math', 'and', 'an open',
       'an'], dtype='<U24')],
 true: 0, pred: 0
193:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
194:  MATH   converges to  ψ  as   MATH   goes to 0, we have 
 : [array(['we have', 'we', 'to', 'math converges', 'math', 'have',
       'converges', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
195:  we have  MATH  Then any   MATH   and  MATH  satisfying MATH  can 
 : [array(['we have', 'we', 'then', 'satisfying math', 'satisfying',
       'math then', 'math satisfying', 'math can', 'math and', 'math',
       'have math', 'have', 'can', 'any math', 'any', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
196:  of a code  MATH , i.e.,   MATH  , where  MATH  is the usual 
 : [array(['where math', 'where', 'usual', 'the usual', 'the', 'of',
       'math where', 'math math', 'math is', 'math', 'is the', 'is',
       'code math', 'code'], dtype='<U24')],
 true: 0, pred: 0
197:  (5.3)  . The other case when   MATH   can be treated exactly the 
 : [array(['when math', 'when', 'the other', 'the', 'other', 'math can',
       'math', 'exactly', 'case when', 'case', 'can be', 'can', 'be'],
      dtype='<U24')],
 true: 0, pred: 0
198:  eta quotient whose level divides   MATH  . For  MATH , let  MATH  (resp. 
 : [array(['resp', 'quotient', 'math resp', 'math let', 'math for', 'math',
       'level', 'let math', 'let', 'for math', 'for', 'eta quotient',
       'eta', 'divides'], dtype='<U24')],
 true: 0, pred: 0
199:  and hence the estimate of   MATH   from  (3.7) . Therefore by   (3.4) 
 : [array(['therefore', 'the estimate', 'the', 'of math', 'of', 'math from',
       'math', 'hence', 'from', 'estimate of', 'estimate', 'by',
       'and hence', 'and'], dtype='<U24')],
 true: 0, pred: 0
200: Let MATH be  MATH   closed minimal Willmore hypersurface with 
 : [array(['with', 'willmore hypersurface', 'willmore', 'minimal willmore',
       'minimal', 'math closed', 'math be', 'math', 'let math', 'let',
       'hypersurface with', 'hypersurface', 'closed minimal', 'closed',
       'be math', 'be'], dtype='<U24')],
 true: 0, pred: 0
202:  (1.12)   can be replaced by  MATH   and MATH  with  MATH  depending 
 : [array(['with math', 'with', 'math with', 'math depending', 'math and',
       'math', 'depending', 'can be', 'can', 'by math', 'by', 'be',
       'and math', 'and', '12'], dtype='<U24')],
 true: 0, pred: 0
203:  If we take  MATH , then  MATH   and by the Divergence formula 
 : [array(['we take', 'we', 'then math', 'then', 'the', 'take math', 'take',
       'math then', 'math and', 'math', 'if we', 'if', 'formula',
       'by the', 'by', 'and by', 'and'], dtype='<U24')],
 true: 0, pred: 0
204:  ten algebraic equations from  (3.9) :  MATH   Recall definition  (2.11)  , we know 
 : [array(['we know', 'we', 'recall', 'math recall', 'math', 'know',
       'from math', 'from', 'equations', 'definition', '11'], dtype='<U24')],
 true: 0, pred: 0
205:  the analogue of  (1.1) . Here   MATH   is given. In order to 
 : [array(['to', 'the', 'order to', 'order', 'of', 'math is', 'math',
       'is given', 'is', 'in order', 'in', 'here math', 'here', 'given'],
      dtype='<U24')],
 true: 0, pred: 0
206:  the Euclidean inner product in   MATH   . Therefore if one can further 
 : [array(['therefore', 'the euclidean', 'the', 'product', 'one can', 'one',
       'math therefore', 'math', 'in math', 'in', 'if', 'further',
       'euclidean', 'can'], dtype='<U24')],
 true: 0, pred: 0
207:  by the  MATH -regularity of   MATH  , one has that  MATH  for 
 : [array(['the math', 'the', 'that math', 'that', 'regularity of',
       'regularity', 'one', 'of math', 'of', 'math one', 'math for',
       'math', 'has', 'for', 'by the', 'by'], dtype='<U24')],
 true: 0, pred: 0
208:  1, or equivalently, to compare   MATH   with 0. Notice that   MATH 
 : [array(['with', 'to', 'that math', 'that', 'or', 'notice that', 'notice',
       'math with', 'math'], dtype='<U24')],
 true: 0, pred: 0
209:  2.6   ( local case ) we get  MATH   where we used again that 
 : [array(['where we', 'where', 'we used', 'we get', 'we', 'used', 'that',
       'math where', 'math', 'local', 'get math', 'get', 'case we',
       'case', 'again'], dtype='<U24')],
 true: 0, pred: 0
210:  If  MATH , then MATH . Moreover,  MATH   is assumed in the example 
 : [array(['then math', 'then', 'the', 'moreover', 'math then',
       'math moreover', 'math is', 'math', 'is', 'in the', 'in',
       'if math', 'if', 'example'], dtype='<U24')],
 true: 0, pred: 0
211:  new boundary conditions  (3.6)  is  MATH   Notice that  ℓ  and   MATH 
 : [array(['that', 'notice that', 'notice', 'new', 'math notice', 'math',
       'is math', 'is', 'conditions', 'boundary conditions', 'boundary',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
212:  have  MATH  for some continuous   MATH   respectively.
 : [array(['some continuous', 'some', 'respectively', 'math respectively',
       'math for', 'math', 'have math', 'have', 'for some', 'for',
       'continuous math', 'continuous'], dtype='<U24')],
 true: 0, pred: 0
213:  when  MATH with MATH and  MATH  , there exists a  unique solution 
 : [array(['with math', 'with', 'when math', 'when', 'unique solution',
       'unique', 'there exists', 'there', 'solution', 'math with',
       'math there', 'math and', 'math', 'exists unique', 'exists',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
214:  first term, by direct computation   MATH   For the second term, we 
 : [array(['we', 'the second', 'the', 'term we', 'term', 'second term',
       'second', 'math for', 'math', 'for the', 'for', 'first term',
       'first', 'direct computation', 'direct', 'computation math',
       'computation', 'by direct', 'by'], dtype='<U24')],
 true: 0, pred: 0
215:  Thus let us suppose that   MATH   and observe that the function 
 : [array(['us', 'thus', 'the function', 'the', 'that the', 'that math',
       'that', 'suppose that', 'suppose', 'observe that', 'observe',
       'math and', 'math', 'let us', 'let', 'function', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
216:  that for  MATH ,  MATH  and   MATH  , we have MATH  for all 
 : [array(['we have', 'we', 'that for', 'that', 'math we', 'math math',
       'math for', 'math and', 'math', 'have math', 'have', 'for math',
       'for all', 'for', 'and math', 'and', 'all'], dtype='<U24')],
 true: 0, pred: 0
218:  as the equation system of   MATH   and  MATH . So if   MATH 
 : [array(['the equation', 'the', 'system of', 'system', 'so', 'of math',
       'of', 'math so', 'math and', 'math', 'if math', 'if', 'equation',
       'as the', 'as', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
219:  MATH   the completion of set   MATH   under norm  (A.5)  . Denote by 
 : [array(['under norm', 'under', 'the completion', 'the', 'set math', 'set',
       'of set', 'of', 'norm denote', 'norm', 'math under', 'math the',
       'math', 'denote by', 'denote', 'completion of', 'completion', 'by'],
      dtype='<U24')],
 true: 1, pred: 1
221:  in elastodynamics  [18,22,31] : MATH MATH  MATH   where  ρ  stands for the 
 : [array(['where', 'the', 'math where', 'math math', 'math', 'in', 'for the',
       'for', '22', '18'], dtype='<U24')],
 true: 0, pred: 0
222:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
223:  the equations of  (3.5)  for   MATH   . We arrived at the following 
 : [array(['we', 'the following', 'the', 'of', 'math we', 'math', 'for math',
       'for', 'following', 'equations', 'at the', 'at'], dtype='<U24')],
 true: 0, pred: 0
224: Let  MATH  , MATH and MATH . Let  MATH 
 : [array(['math math', 'math let', 'math and', 'math', 'let math', 'let',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
225:  the condition:  MATH  that is,  MATH   Let MATH  Then  (6.23)  yields 
 : [array(['yields', 'then', 'the condition', 'the', 'that is', 'that',
       'math then', 'math that', 'math let', 'math', 'let math', 'let',
       'is math', 'is', 'condition math', 'condition', '23'], dtype='<U24')],
 true: 0, pred: 0
226:  abuse of notation, for every   MATH   we will use the following 
 : [array(['will', 'we will', 'we', 'use the', 'use', 'the following', 'the',
       'of', 'notation', 'math we', 'math', 'for every', 'for',
       'following', 'every math', 'every'], dtype='<U24')],
 true: 0, pred: 0
227:  By integrating this estimate between   MATH   and  MATH  , as above we 
 : [array(['we', 'this estimate', 'this', 'math as', 'math and', 'math',
       'integrating', 'estimate', 'by', 'between math', 'between',
       'as above', 'as', 'and math', 'and', 'above we', 'above'],
      dtype='<U24')],
 true: 0, pred: 0
228:  by  A  is stronger than   MATH  . In addition,  A  must correspond 
 : [array(['than math', 'than', 'must', 'math in', 'math', 'is', 'in',
       'by is', 'by'], dtype='<U24')],
 true: 0, pred: 0
229:  Σ. However, the estimates of   MATH   only involves the interior points 
 : [array(['the estimates', 'the', 'points', 'only', 'of math', 'of',
       'math only', 'math', 'interior', 'however', 'estimates of',
       'estimates'], dtype='<U24')],
 true: 0, pred: 0
230:  with  MATH when MATH with  MATH  and MATH , there exists  a 
 : [array(['with math', 'with', 'when math', 'when', 'there exists', 'there',
       'math with', 'math when', 'math there', 'math and', 'math',
       'exists', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
231:  of  Theorem 1  for large   MATH  ,  MATH  satisfies the conditions of 
 : [array(['theorem', 'the', 'satisfies the', 'satisfies', 'of theorem', 'of',
       'math satisfies', 'math math', 'math', 'for', 'conditions'],
      dtype='<U24')],
 true: 0, pred: 0
232:  weak solution  u  of the   MATH  -Laplace equation  MATH 
 : [array(['weak solution', 'weak', 'the math', 'the', 'solution of',
       'solution', 'of the', 'of', 'math laplace', 'math',
       'laplace equation', 'laplace', 'equation math', 'equation'],
      dtype='<U24')],
 true: 0, pred: 0
233:  from the  (4.3)  that if   MATH   then  MATH  and  MATH  , and 
 : [array(['then math', 'then', 'the', 'that if', 'that', 'math then',
       'math and', 'math', 'if math', 'if', 'from the', 'from',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
234:  [13]  , i.e., for any  MATH ,   MATH  . Let  MATH  denote the ring 
 : [array(['the', 'math math', 'math let', 'math denote', 'math', 'let math',
       'let', 'for any', 'for', 'denote the', 'denote', 'any math', 'any',
       '13'], dtype='<U24')],
 true: 0, pred: 0
236:  the Gauss sum  MATH  over   MATH   by  MATH .
 : [array(['the', 'sum', 'over math', 'over', 'math over', 'math by', 'math',
       'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
237:  relation “  MATH ” in   MATH   by  MATH  iff  MATH  . Put 
 : [array(['relation', 'put', 'math in', 'math iff', 'math by', 'math',
       'in math', 'in', 'iff math', 'iff', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
238:  an open neighborhood  MATH  of   MATH   such that  MATH  can always 
 : [array(['that math', 'that', 'such that', 'such', 'open neighborhood',
       'open', 'of math', 'of', 'neighborhood math', 'neighborhood',
       'math such', 'math of', 'math can', 'math', 'can', 'an open', 'an',
       'always'], dtype='<U24')],
 true: 0, pred: 0
241:  Closed minimal Willmore hypersurfaces of   MATH   with constant scalar curvature
 : [array(['with constant', 'with', 'willmore', 'scalar curvature', 'scalar',
       'of math', 'of', 'minimal willmore', 'minimal', 'math with',
       'math', 'hypersurfaces', 'curvature', 'constant scalar',
       'constant', 'closed minimal', 'closed'], dtype='<U24')],
 true: 0, pred: 0
242:  for a vector  v  with   MATH  . Then we have MATH  Now, 
 : [array(['with math', 'with', 'we have', 'we', 'vector', 'then we', 'then',
       'now', 'math then', 'math now', 'math', 'have math', 'have', 'for'],
      dtype='<U24')],
 true: 0, pred: 0
243:  In this case, we set   MATH 
 : [array(['we set', 'we', 'this case', 'this', 'set math', 'set', 'math',
       'in this', 'in', 'case we', 'case'], dtype='<U24')],
 true: 0, pred: 0
245:  we write  MATH ,  MATH  and   MATH  . Since  MATH  is primitive,   MATH 
 : [array(['write math', 'write', 'we write', 'we', 'since math', 'since',
       'math since', 'math math', 'math is', 'math and', 'math', 'is',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
246:  (3.9)  , we get MATH MATH  MATH  MATH MATH MATH MATH
 : [array(['we get', 'we', 'math math', 'math', 'get math', 'get'],
      dtype='<U24')],
 true: 0, pred: 0
247:  recovers the Hardy inequality: here   MATH  ,  MATH  is the Euclidean norm, 
 : [array(['the euclidean', 'the', 'norm', 'math math', 'math is', 'math',
       'is the', 'is', 'inequality', 'here math', 'here',
       'hardy inequality', 'hardy', 'euclidean'], dtype='<U24')],
 true: 0, pred: 0
248: Setting   MATH   into  (3.39) , we get  MATH 
 : [array(['we get', 'we', 'setting math', 'setting', 'math into', 'math',
       'into 39', 'into', 'get math', 'get', '39 we', '39'], dtype='<U24')],
 true: 0, pred: 0
250:  recall that  MATH  for every   MATH   . By using this observation in 
 : [array(['using', 'this', 'that math', 'that', 'recall that', 'recall',
       'math for', 'math by', 'math', 'in', 'for every', 'for',
       'every math', 'every', 'by using', 'by'], dtype='<U24')],
 true: 0, pred: 0
251:    Let   MATH  ,  MATH ,  MATH ,  MATH  and   MATH 
 : [array(['math math', 'math and', 'math', 'let math', 'let', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
252:  scalar curvature:  MATH MATH MATH  MATH  MATH
 : [array(['scalar curvature', 'scalar', 'math math', 'math',
       'curvature math', 'curvature'], dtype='<U24')],
 true: 0, pred: 0
253:  MATH   becomes arbitrarily large as   MATH   (see  [7]  ). So, if we 
 : [array(['we', 'so', 'see', 'math see', 'math becomes', 'math', 'if we',
       'if', 'becomes', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
254:  (A.13)  : MATH Let MATH and  MATH  . If MATH and MATH  then 
 : [array(['then', 'math then', 'math let', 'math if', 'math and', 'math',
       'let math', 'let', 'if math', 'if', 'and math', 'and', '13'],
      dtype='<U24')],
 true: 0, pred: 0
255:  We start by observing that   MATH   Thus we get MATH  The 
 : [array(['we get', 'we', 'thus we', 'thus', 'the', 'that math', 'that',
       'observing that', 'observing', 'math thus', 'math the', 'math',
       'get math', 'get', 'by'], dtype='<U24')],
 true: 0, pred: 0
256:  MATH  . Then the linear code   MATH   defined by  (2)  is a 
 : [array(['then the', 'then', 'the linear', 'the', 'math then',
       'math defined', 'math', 'linear code', 'linear', 'is',
       'defined by', 'defined', 'code math', 'code', 'by is', 'by'],
      dtype='<U24')],
 true: 1, pred: 1
258:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
259: Let  MATH   Then the linearized problem for 
 : [array(['then the', 'then', 'the', 'problem', 'math then', 'math',
       'linearized', 'let math', 'let', 'for'], dtype='<U24')],
 true: 0, pred: 0
260:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
262:  It follows that  MATH , i.e.,   MATH  . From the proof of   Theorem 
 : [array(['theorem', 'the proof', 'the', 'that math', 'that', 'proof',
       'of theorem', 'of', 'math math', 'math from', 'math', 'it follows',
       'it', 'from the', 'from', 'follows that', 'follows'], dtype='<U24')],
 true: 0, pred: 0
264:  Due to  MATH , we get   MATH   which implies  MATH  Similarly, we 
 : [array(['which implies', 'which', 'we get', 'we', 'to math', 'to',
       'similarly we', 'similarly', 'math which', 'math we',
       'math similarly', 'math', 'implies math', 'implies', 'get math',
       'get', 'due'], dtype='<U24')],
 true: 0, pred: 0
265:  MATH  ,  MATH ,  MATH ,  MATH  and   MATH  . Then the linear code   MATH 
 : [array(['then the', 'then', 'the linear', 'the', 'math then', 'math math',
       'math and', 'math', 'linear code', 'linear', 'code math', 'code',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
266:  A   and  B  of loop   MATH   and the shock polar   MATH 
 : [array(['the shock', 'the', 'shock polar', 'shock', 'polar', 'of',
       'math and', 'math', 'and the', 'and'], dtype='<U24')],
 true: 1, pred: 1
267:  number of nonzero columns of   MATH   is at least  MATH  . Hence, 
 : [array(['of math', 'of', 'number of', 'number', 'nonzero', 'math is',
       'math hence', 'math', 'least math', 'least', 'is at', 'is',
       'hence', 'columns', 'at least', 'at'], dtype='<U24')],
 true: 0, pred: 0
269:  and  MATH  is such that  MATH 
 : [array(['that math', 'that', 'such that', 'such', 'math is', 'math',
       'is such', 'is', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
270:  that  MATH then, for any  MATH  and MATH with MATH  when 
 : [array(['with math', 'with', 'when', 'then for', 'then', 'that math',
       'that', 'math with', 'math when', 'math then', 'math and', 'math',
       'for any', 'for', 'any math', 'any', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
271: when  MATH  , MATH
 : [array(['when math', 'when', 'math math', 'math'], dtype='<U24')],
 true: 0, pred: 0
272:  MATH   together indicate MATH  Combining   MATH   and  MATH  , we can obtain 
 : [array(['we can', 'we', 'together', 'obtain', 'math we', 'math together',
       'math combining', 'math and', 'math', 'combining', 'can obtain',
       'can', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
273:  without loss of generality that   MATH  . If  MATH  there is nothing 
 : [array(['without loss', 'without', 'there is', 'there', 'that math',
       'that', 'of generality', 'of', 'math there', 'math if', 'math',
       'loss of', 'loss', 'is', 'if math', 'if', 'generality'],
      dtype='<U24')],
 true: 0, pred: 0
275:  zero. We choose  MATH  with   MATH   such that neither  MATH  nor 
 : [array(['zero', 'with math', 'with', 'we', 'that', 'such that', 'such',
       'math with', 'math such', 'math', 'choose'], dtype='<U24')],
 true: 0, pred: 0
276:  with the boundary condition at   MATH  : MATH  where  MATH  at   MATH 
 : [array(['with the', 'with', 'where math', 'where', 'the boundary', 'the',
       'math where', 'math math', 'math at', 'math', 'condition',
       'boundary condition', 'boundary', 'at math', 'at'], dtype='<U24')],
 true: 0, pred: 0
277:  subcase, equation  (3.2)  reduces to  MATH 
 : [array(['to math', 'to', 'subcase', 'math', 'equation'], dtype='<U24')],
 true: 0, pred: 0
279:  fact,  MATH  are poles of   MATH   when  MATH  or  MATH  . Therefore 
 : [array(['when math', 'when', 'therefore', 'or math', 'or', 'of math', 'of',
       'math when', 'math therefore', 'math or', 'math are', 'math',
       'fact', 'are'], dtype='<U24')],
 true: 0, pred: 0
280:  holds for all  MATH . Let   MATH   such that  MATH . Let   MATH 
 : [array(['that math', 'that', 'such that', 'such', 'math such', 'math let',
       'math', 'let math', 'let', 'holds', 'for all', 'for', 'all math',
       'all'], dtype='<U24')],
 true: 0, pred: 0
282:  an admissible domain  MATH , then  MATH 
 : [array(['then math', 'then', 'math then', 'math', 'domain math', 'domain',
       'an admissible', 'an', 'admissible domain', 'admissible'],
      dtype='<U24')],
 true: 0, pred: 0
283: An  additive character  of   MATH   is a nonzero function   MATH 
 : [array(['of math', 'of', 'nonzero', 'math is', 'math', 'is nonzero', 'is',
       'function math', 'function', 'character of', 'character', 'an',
       'additive character', 'additive'], dtype='<U24')],
 true: 0, pred: 0
284:  (4.5)   that when  MATH  and   MATH   the sign of  MATH  is 
 : [array(['when math', 'when', 'the sign', 'the', 'that', 'sign of', 'sign',
       'of math', 'of', 'math the', 'math is', 'math and', 'math', 'is',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
287:  and  MATH is odd. Then  MATH  of (5) is a  two-weight 
 : [array(['weight', 'two weight', 'two', 'then math', 'then', 'of is', 'of',
       'odd then', 'odd', 'math of', 'math is', 'math', 'is odd', 'is',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
288:  MATH   into  (3.39) , we get  MATH   On the one hand, for 
 : [array(['we get', 'we', 'the', 'one', 'on the', 'on', 'math on',
       'math into', 'math', 'into 39', 'into', 'hand', 'get math', 'get',
       'for', '39 we', '39'], dtype='<U24')],
 true: 0, pred: 0
290:  Leibniz rule  (2.1) , we get  MATH   Observe that by the hypothesis 
 : [array(['we get', 'we', 'the', 'that by', 'that', 'observe that',
       'observe', 'math observe', 'math', 'hypothesis', 'get math', 'get',
       'by the', 'by'], dtype='<U24')],
 true: 0, pred: 0
291:  notational simplicity, we will set   MATH   We also set  MATH 
 : [array(['will', 'we will', 'we also', 'we', 'simplicity', 'set math',
       'set', 'math we', 'math', 'also'], dtype='<U24')],
 true: 0, pred: 0
292:  all, we define the sequence   MATH   We observe  MATH  is strictly 
 : [array(['we observe', 'we define', 'we', 'the sequence', 'the',
       'sequence math', 'sequence', 'observe', 'math we', 'math is',
       'math', 'is', 'define the', 'define', 'all'], dtype='<U24')],
 true: 0, pred: 0
293:  is called a step of   MATH   and the left invariant vector 
 : [array(['vector', 'the', 'step of', 'step', 'of math', 'of', 'math and',
       'math', 'left invariant', 'left', 'is called', 'is',
       'invariant vector', 'invariant', 'called', 'and the', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
295:  Let  MATH ,  MATH ,  MATH ,   MATH   and  MATH  . Then the linear 
 : [array(['then the', 'then', 'the linear', 'the', 'math then', 'math math',
       'math and', 'math', 'linear', 'let math', 'let', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
296:  the multipliers in  MATH  by   MATH  .
 : [array(['the', 'math by', 'math', 'in math', 'in', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
297:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
298:  the last four rows of   MATH   . Isolating the third, forth, seventh 
 : [array(['third', 'the third', 'the last', 'the', 'of math', 'of', 'math',
       'last', 'four'], dtype='<U24')],
 true: 0, pred: 0
299:  equality  (4.6) ,  (4.5)  reduces to  MATH 
 : [array(['to math', 'to', 'math', 'equality'], dtype='<U24')],
 true: 0, pred: 0
300:  (4.4)  , we can see that   MATH   can not be smoothly diagonalized 
 : [array(['we can', 'we', 'that math', 'that', 'see that', 'see', 'not',
       'math can', 'math', 'can not', 'can', 'be'], dtype='<U24')],
 true: 0, pred: 0
301:  MATH  . Then the linear code   MATH   defined in  (3)  is a 
 : [array(['then the', 'then', 'the linear', 'the', 'math then',
       'math defined', 'math', 'linear code', 'linear', 'is', 'in is',
       'in', 'defined in', 'defined', 'code math', 'code'], dtype='<U24')],
 true: 1, pred: 1
302:  one. By the definition of   MATH   , its dual has a codeword 
 : [array(['the definition', 'the', 'one', 'of math', 'of', 'math', 'its',
       'has', 'dual', 'definition of', 'definition', 'codeword', 'by the',
       'by'], dtype='<U24')],
 true: 0, pred: 0
303:  if and only if  MATH  (  MATH   ). Using the orthogonal relation of 
 : [array(['using the', 'using', 'the', 'relation', 'only if', 'only', 'of',
       'math using', 'math math', 'math', 'if math', 'if and', 'if',
       'and only', 'and'], dtype='<U24')],
 true: 0, pred: 0
304:  property  [13] , i.e., for any   MATH  ,  MATH . Let  MATH  denote the 
 : [array(['the', 'property', 'math math', 'math let', 'math denote', 'math',
       'let math', 'let', 'for any', 'for', 'denote the', 'denote',
       'any math', 'any', '13'], dtype='<U24')],
 true: 0, pred: 0
306:  is either an equatorial 3-sphere,   MATH  product of sphere, or  a 
 : [array(['sphere math', 'sphere', 'product of', 'product', 'or',
       'of sphere', 'of', 'math', 'is either', 'is', 'equatorial',
       'either an', 'either', 'an equatorial', 'an'], dtype='<U24')],
 true: 0, pred: 0
307:  replacing  X  by  MATH  where   MATH   for some  MATH  with   MATH 
 : [array(['with math', 'with', 'where math', 'where', 'some math', 'some',
       'replacing by', 'replacing', 'math with', 'math where', 'math for',
       'math', 'for some', 'for', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
308:  MATH   and  MATH , we have   MATH  . Again a use of   (4.8) 
 : [array(['we have', 'we', 'use', 'of', 'math we', 'math and', 'math',
       'have math', 'have', 'and math', 'and', 'again'], dtype='<U24')],
 true: 0, pred: 0
309:  if necessary, replacing  X  by   MATH   where  MATH  for some   MATH 
 : [array(['where math', 'where', 'some math', 'some', 'replacing by',
       'replacing', 'necessary replacing', 'necessary', 'math where',
       'math for', 'math', 'if necessary', 'if', 'for some', 'for',
       'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
310:  MATH  , it is clear that   MATH  . Hence  MATH . By using   (3.27) 
 : [array(['using', 'that math', 'that', 'math it', 'math hence', 'math by',
       'math', 'it is', 'it', 'is', 'hence math', 'hence', 'by using',
       'by'], dtype='<U24')],
 true: 0, pred: 0
311: In particular,  MATH  can only be 0,  4, 
 : [array(['particular', 'only', 'math can', 'math', 'in particular', 'in',
       'can', 'be'], dtype='<U24')],
 true: 0, pred: 0
312: Recall that   MATH   Similar to the proof of 
 : [array(['to the', 'to', 'the proof', 'the', 'that math', 'that',
       'recall that', 'recall', 'proof', 'of', 'math'], dtype='<U24')],
 true: 0, pred: 0
313:  MATH  , it is obvious that   MATH  , which, by   [56, Lemma 4.2] 
 : [array(['which', 'that math', 'that', 'math which', 'math it', 'math',
       'lemma', 'it is', 'it', 'is', 'by'], dtype='<U24')],
 true: 0, pred: 0
314:  such divisors of  N  by   MATH  . It follows trivially that   MATH 
 : [array(['trivially', 'that math', 'that', 'such', 'of', 'math it', 'math',
       'it follows', 'it', 'follows trivially', 'follows', 'divisors of',
       'divisors', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
315:  corresponding to  MATH ,  MATH  and   MATH   for some  MATH  . This nonlinear 
 : [array(['to math', 'to', 'this', 'some math', 'some', 'math this',
       'math math', 'math for', 'math and', 'math', 'for some', 'for',
       'corresponding to', 'corresponding', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
316: In order to obtain   MATH   , we should use some other 
 : [array(['we', 'use', 'to obtain', 'to', 'some', 'should', 'other',
       'order to', 'order', 'obtain math', 'obtain', 'math we', 'math',
       'in order', 'in'], dtype='<U24')],
 true: 0, pred: 0
317:  which implies  MATH . Note that   MATH   is non-singular. Then we have 
 : [array(['which implies', 'which', 'we have', 'we', 'then we', 'then',
       'that math', 'that', 'note that', 'note', 'non', 'math note',
       'math is', 'math', 'is', 'implies math', 'implies', 'have'],
      dtype='<U24')],
 true: 0, pred: 0
318:  MATH   the  MATH  norm of   MATH  , i.e.  MATH .
 : [array(['the math', 'the', 'of math', 'of', 'norm of', 'norm', 'math the',
       'math norm', 'math math', 'math'], dtype='<U24')],
 true: 0, pred: 0
319:  Since  MATH ,  MATH . So, if   MATH  , then  MATH  has at least 
 : [array(['then math', 'then', 'so', 'since math', 'since', 'math then',
       'math so', 'math math', 'math has', 'math', 'least', 'if math',
       'if', 'has', 'at least', 'at'], dtype='<U24')],
 true: 0, pred: 0
320:  an admissible domain  MATH . Then  MATH  is a  convergent integral for 
 : [array(['then math', 'then', 'math then', 'math is', 'math', 'is',
       'integral', 'for', 'domain math', 'domain', 'an admissible', 'an',
       'admissible domain', 'admissible'], dtype='<U24')],
 true: 0, pred: 0
321:  be two positive integers with   MATH   and  MATH  and assume that 
 : [array(['with math', 'with', 'two positive', 'two', 'that',
       'positive integers', 'positive', 'math and', 'math',
       'integers with', 'integers', 'be two', 'be', 'assume that',
       'assume', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
322:  us will be that if   MATH   for  MATH  then  u  defined 
 : [array(['will be', 'will', 'us', 'then', 'that if', 'that', 'math then',
       'math for', 'math', 'if math', 'if', 'for math', 'for', 'defined',
       'be'], dtype='<U24')],
 true: 0, pred: 0
324:  MATH  , we consider the equation  MATH   for a given  MATH  . Let 
 : [array(['we consider', 'we', 'the equation', 'the', 'math we', 'math let',
       'math for', 'math', 'let', 'given math', 'given', 'for given',
       'for', 'equation math', 'equation', 'consider the', 'consider'],
      dtype='<U24')],
 true: 0, pred: 0
325:  is such that  MATH  thus   MATH   and we can conclude in 
 : [array(['we can', 'we', 'thus math', 'thus', 'that math', 'that',
       'such that', 'such', 'math thus', 'math and', 'math', 'is such',
       'is', 'in', 'conclude', 'can', 'and we', 'and'], dtype='<U24')],
 true: 0, pred: 0
327:  the left invariant vector fields   MATH   are called the (Jacobian) generators 
 : [array(['vector fields', 'vector', 'the jacobian', 'the', 'math are',
       'math', 'left invariant', 'left', 'jacobian', 'invariant vector',
       'invariant', 'fields math', 'fields', 'called the', 'called',
       'are'], dtype='<U24')],
 true: 1, pred: 1
328:  in  MATH  over  MATH  implies  MATH   which proves  (2.28) .
 : [array(['which', 'proves', 'over math', 'over', 'math which', 'math over',
       'math implies', 'math', 'in math', 'in', 'implies math', 'implies'],
      dtype='<U24')],
 true: 0, pred: 0
330:  first stratum, with the sub-Laplacian   MATH   For precise definitions we refer 
 : [array(['with the', 'with', 'we refer', 'we', 'the sub', 'the',
       'sub laplacian', 'sub', 'refer', 'precise', 'math for', 'math',
       'laplacian math', 'laplacian', 'for', 'first'], dtype='<U24')],
 true: 1, pred: 1
331: For  MATH  , let MATH be a  holomorphic 
 : [array(['math let', 'math be', 'math', 'let math', 'let', 'holomorphic',
       'for math', 'for', 'be'], dtype='<U24')],
 true: 0, pred: 0
332:  MATH   can be obtained by the 
 : [array(['the', 'obtained', 'math can', 'math', 'can be', 'can', 'by the',
       'by', 'be'], dtype='<U24')],
 true: 0, pred: 0
333: Let  MATH  be a  closed minimal Willmore 
 : [array(['willmore', 'minimal willmore', 'minimal', 'math be', 'math',
       'let math', 'let', 'closed minimal', 'closed', 'be closed', 'be'],
      dtype='<U24')],
 true: 0, pred: 0
334:  (3.15)   and  (3.16)  we obtain  MATH   Therefore, MATH  that is,   MATH 
 : [array(['we obtain', 'we', 'therefore math', 'therefore', 'that is',
       'that', 'obtain math', 'obtain', 'math therefore', 'math that',
       'math', 'is math', 'is', 'and', '16', '15'], dtype='<U24')],
 true: 0, pred: 0
335:  By choosing  MATH  such that  MATH   we are then reduced to 
 : [array(['we are', 'we', 'to', 'then', 'that math', 'that', 'such that',
       'such', 'reduced', 'math we', 'math such', 'math', 'choosing math',
       'choosing', 'by', 'are'], dtype='<U24')],
 true: 0, pred: 0
337: Case  MATH  MATH .
 : [array(['math math', 'math', 'case math', 'case'], dtype='<U24')],
 true: 0, pred: 0
338:  the following lower bound for   MATH  MATH  where  MATH  . We need 
 : [array(['where math', 'where', 'we need', 'we', 'the following', 'the',
       'need', 'math where', 'math we', 'math math', 'math', 'lower',
       'for math', 'for', 'following lower', 'following', 'bound'],
      dtype='<U24')],
 true: 0, pred: 0
339: For  MATH , we have   MATH   . So, the lemma holds trivially 
 : [array(['we have', 'we', 'trivially', 'the lemma', 'the', 'so', 'math we',
       'math so', 'math', 'lemma', 'holds', 'have math', 'have',
       'for math', 'for'], dtype='<U24')],
 true: 0, pred: 0
341:  codeword defined in  (2) . Let   MATH   be a Niho exponent and 
 : [array(['niho', 'math be', 'math', 'let math', 'let', 'in', 'exponent',
       'defined in', 'defined', 'codeword', 'be', 'and'], dtype='<U24')],
 true: 1, pred: 1
342: (iii)  If  MATH  and MATH  is even, then 
 : [array(['then', 'math is', 'math and', 'math', 'is even', 'is', 'iii if',
       'iii', 'if math', 'if', 'even then', 'even', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
343:  MATH   More precisely, we have  MATH   Next, define  MATH  and   MATH 
 : [array(['we have', 'we', 'precisely we', 'precisely', 'next',
       'more precisely', 'more', 'math more', 'math and', 'math',
       'have math', 'have', 'define math', 'define', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
344:  previous, we also observed that   MATH   and used that  MATH  . Observe 
 : [array(['we also', 'we', 'used that', 'used', 'that math', 'that',
       'previous', 'observe', 'math observe', 'math and', 'math', 'and',
       'also'], dtype='<U24')],
 true: 0, pred: 0
346:  (3.5)   from the left by   MATH   and obtain the new boundary 
 : [array(['the new', 'the', 'obtain the', 'obtain', 'new', 'math and',
       'math', 'left', 'from the', 'from', 'by math', 'by', 'boundary',
       'and'], dtype='<U24')],
 true: 0, pred: 0
347:  that  MATH . By  Lemma 8 ,   MATH   can be given as follows. 
 : [array(['that math', 'that', 'math can', 'math by', 'math', 'lemma math',
       'lemma', 'given', 'follows', 'can be', 'can', 'by lemma', 'by',
       'be', 'as follows', 'as'], dtype='<U24')],
 true: 0, pred: 0
348:  to get  MATH  for some   MATH   . The previous estimate holds for 
 : [array(['to get', 'to', 'the previous', 'the', 'some math', 'some',
       'previous', 'math the', 'math for', 'math', 'holds', 'get math',
       'get', 'for some', 'for', 'estimate holds', 'estimate'],
      dtype='<U24')],
 true: 0, pred: 0
349:  if  MATH , then we have   MATH 
 : [array(['we have', 'we', 'then we', 'then', 'math then', 'math', 'if math',
       'if', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
350: (Almeida–Brito–Sousa Jr.  [2] )  Let  MATH  K and R  be the 
 : [array(['the', 'math and', 'math', 'let math', 'let', 'be the', 'be',
       'and'], dtype='<U24')],
 true: 0, pred: 0
352:  β  , once again we have  MATH   for all  MATH  and   MATH 
 : [array(['we have', 'we', 'once', 'math for', 'math and', 'math',
       'have math', 'have', 'for all', 'for', 'and math', 'and',
       'all math', 'all', 'again we', 'again'], dtype='<U24')],
 true: 0, pred: 0
353:  holomorphic eta quotient of weight   MATH   and level  N  implies only 
 : [array(['weight math', 'weight', 'quotient of', 'quotient', 'only',
       'of weight', 'of', 'math and', 'math', 'level', 'implies',
       'holomorphic eta', 'holomorphic', 'eta quotient', 'eta', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
354:  nonsingular matrix, with  MATH  Then  MATH   For  MATH , MATH  and  MATH 
 : [array(['with math', 'with', 'then math', 'then', 'matrix', 'math then',
       'math math', 'math for', 'math and', 'math', 'for math', 'for',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
355:  K   becomes an infinite strip:  MATH   and MATH  where  MATH .
 : [array(['where math', 'where', 'math where', 'math and', 'math', 'becomes',
       'and math', 'and', 'an'], dtype='<U24')],
 true: 0, pred: 0
356:  for each  MATH , we have  MATH  Consequently, we also have  MATH 
 : [array(['we have', 'we also', 'we', 'math we', 'math', 'have math', 'have',
       'for each', 'for', 'each math', 'each', 'also have', 'also'],
      dtype='<U24')],
 true: 0, pred: 0
358:  of the functions  MATH  and   MATH  MATH  Lemma B.1Letp≥2, 
 : [array(['the functions', 'the', 'of the', 'of', 'math math', 'math and',
       'math', 'lemma', 'functions math', 'functions', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
359:  MATH  MATH MATH MATH MATH  MATH 
 : [array(['math math', 'math'], dtype='<U24')],
 true: 0, pred: 0
360: MATH , and   MATH   if and only if   MATH 
 : [array(['only if', 'only', 'math if', 'math and', 'math', 'if math',
       'if and', 'if', 'and only', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
361:  a linear code of length   MATH   over  MATH  by  MATH  where 
 : [array(['where', 'over math', 'over', 'of', 'math where', 'math over',
       'math by', 'math', 'linear code', 'linear', 'length', 'code',
       'by math', 'by'], dtype='<U24')],
 true: 1, pred: 1
362:  class  MATH  if for each   MATH   there exist a neighbourhood   MATH 
 : [array(['there exist', 'there', 'math there', 'math if', 'math', 'if',
       'for each', 'for', 'exist', 'each math', 'each', 'class math',
       'class'], dtype='<U24')],
 true: 0, pred: 0
363:  origin with the property that   MATH   as  MATH  . Since, in the 
 : [array(['with the', 'with', 'the', 'that math', 'that', 'since',
       'property', 'origin', 'math since', 'math as', 'math', 'in the',
       'in', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
365:  respectively. This implies  MATH . Hence   MATH   with  MATH  are roots of 
 : [array(['with math', 'with', 'this implies', 'this', 'roots of', 'roots',
       'respectively', 'of', 'math with', 'math hence', 'math are',
       'math', 'implies math', 'implies', 'hence math', 'hence',
       'are roots', 'are'], dtype='<U24')],
 true: 0, pred: 0
366:  solution such that, for any   MATH   , if the wedge edge is 
 : [array(['wedge', 'the wedge', 'the', 'that for', 'that', 'such that',
       'such', 'solution', 'math if', 'math', 'is', 'if the', 'if',
       'for any', 'for', 'edge', 'any math', 'any'], dtype='<U24')],
 true: 0, pred: 0
367:  the function  MATH  defined by  MATH   is  MATH  -Hölder continuous. More 
 : [array(['the function', 'the', 'more', 'math is', 'math defined', 'math',
       'is math', 'is', 'hölder continuous', 'hölder', 'function math',
       'function', 'defined by', 'defined', 'continuous', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
368:  particular, to the fundamental solution   MATH  .
 : [array(['to the', 'to', 'the fundamental', 'the', 'solution math',
       'solution', 'particular', 'math', 'fundamental solution',
       'fundamental'], dtype='<U24')],
 true: 0, pred: 0
370:  with the boundary   ∂Ω  and  MATH  . Then MATH where MATH .
 : [array(['with the', 'with', 'where math', 'where', 'then math', 'then',
       'the boundary', 'the', 'math where', 'math then', 'math',
       'boundary', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
372: Let  MATH   be an admissible domain with 
 : [array(['with', 'math be', 'math', 'let math', 'let', 'domain with',
       'domain', 'be an', 'be', 'an admissible', 'an',
       'admissible domain', 'admissible'], dtype='<U24')],
 true: 0, pred: 0
373:  U   is either univalent on   MATH   , is a constant, or its 
 : [array(['univalent', 'or', 'on math', 'on', 'math is', 'math', 'its',
       'is either', 'is constant', 'is', 'either', 'constant'],
      dtype='<U24')],
 true: 0, pred: 0
374:  at the minimum point of   MATH  , then  MATH  has nonnegative scalar 
 : [array(['then math', 'then', 'the minimum', 'the', 'scalar', 'point of',
       'point', 'of math', 'of', 'nonnegative', 'minimum', 'math then',
       'math has', 'math', 'has', 'at the', 'at'], dtype='<U24')],
 true: 0, pred: 0
375: Let  MATH  , MATH , and MATH  . Suppose that 
 : [array(['that', 'suppose that', 'suppose', 'math suppose', 'math math',
       'math and', 'math', 'let math', 'let', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
376:  Furthermore, when  MATH , we have  MATH   Combining  (3.31)  and  (3.32)  , the 
 : [array(['when math', 'when', 'we have', 'we', 'the', 'math we',
       'math combining', 'math', 'have math', 'have', 'furthermore',
       'combining', 'and'], dtype='<U24')],
 true: 0, pred: 0
377:  More precisely, the roots are   MATH  such that
 : [array(['the roots', 'the', 'that', 'such that', 'such', 'roots are',
       'roots', 'precisely', 'more precisely', 'more', 'math such',
       'math', 'are math', 'are'], dtype='<U24')],
 true: 0, pred: 0
378:  be estimated. Therefore  MATH , and   MATH   is controlled by  h  . This 
 : [array(['this', 'therefore math', 'therefore', 'math is', 'math and',
       'math', 'is', 'estimated', 'controlled by', 'controlled', 'by',
       'be', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
379:  imply that both  MATH  and   MATH   are  MATH  . So, the quantity 
 : [array(['the', 'that', 'so', 'quantity', 'math so', 'math are', 'math and',
       'math', 'both math', 'both', 'are math', 'are', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
380:  conic zones  MATH  we obtain  MATH   for all  MATH  with   MATH 
 : [array(['with math', 'with', 'we obtain', 'we', 'obtain math', 'obtain',
       'math with', 'math we', 'math for', 'math', 'for all', 'for',
       'conic', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
381:  any two adjacent vertices  MATH ,   MATH  , there are exactly  MATH  vertices 
 : [array(['vertices', 'two', 'there are', 'there', 'math there', 'math math',
       'math', 'exactly', 'are', 'any', 'adjacent'], dtype='<U24')],
 true: 1, pred: 1
382:  inducing the same orientation as   MATH   on  γ  . Then there exists 
 : [array(['there exists', 'there', 'then there', 'then', 'the same', 'the',
       'same', 'orientation', 'on then', 'on', 'math on', 'math',
       'exists', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
383:  is,  MATH with the estimate:  MATH 
 : [array(['with the', 'with', 'the estimate', 'the', 'math with', 'math',
       'is math', 'is', 'estimate math', 'estimate'], dtype='<U24')],
 true: 0, pred: 0
384:  be also proved that if   MATH   is not a free Carnot 
 : [array(['that if', 'that', 'proved', 'not', 'math is', 'math', 'is not',
       'is', 'if math', 'if', 'free', 'carnot', 'be', 'also'],
      dtype='<U24')],
 true: 0, pred: 0
385:  D   such that MATH  Let  MATH   denote the Poisson kernel. The 
 : [array(['the', 'that math', 'that', 'such that', 'such', 'poisson',
       'math let', 'math denote', 'math', 'let math', 'let', 'kernel',
       'denote the', 'denote'], dtype='<U24')],
 true: 0, pred: 0
387:  we have  MATH , and hence   MATH  . By the  (4.3)  we know 
 : [array(['we know', 'we have', 'we', 'the', 'math by', 'math and', 'math',
       'know', 'hence math', 'hence', 'have math', 'have', 'by the', 'by',
       'and hence', 'and'], dtype='<U24')],
 true: 0, pred: 0
388:  obtain the contradiction! This implies   MATH  , and then  MATH  , for all 
 : [array(['this implies', 'this', 'then math', 'then', 'the', 'obtain the',
       'obtain', 'math for', 'math and', 'math', 'implies math',
       'implies', 'for all', 'for', 'and then', 'and', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
389:  MATH   such that  MATH  and   MATH  . Then we define MATH  for 
 : [array(['we define', 'we', 'then we', 'then', 'that math', 'that',
       'such that', 'such', 'math then', 'math such', 'math for',
       'math and', 'math', 'for', 'define math', 'define', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
390:  the Dini's smooth Jordan curve   MATH   we define the operator   T 
 : [array(['we define', 'we', 'the operator', 'the', 'smooth jordan',
       'smooth', 'operator', 'math we', 'math', 'jordan curve', 'jordan',
       'dini smooth', 'dini', 'define the', 'define', 'curve'],
      dtype='<U24')],
 true: 1, pred: 1
392: Let  MATH   be the fundamental solution to 
 : [array(['to', 'the fundamental', 'the', 'solution to', 'solution',
       'math be', 'math', 'let math', 'let', 'fundamental solution',
       'fundamental', 'be the', 'be'], dtype='<U24')],
 true: 0, pred: 0
393:  Suppose that  MATH  for every   MATH  . Then for  MATH  , there is 
 : [array(['there is', 'there', 'then for', 'then', 'that math', 'that',
       'suppose that', 'suppose', 'math there', 'math then', 'math for',
       'math', 'is', 'for math', 'for every', 'for', 'every math',
       'every'], dtype='<U24')],
 true: 0, pred: 0
394:  (1.2)   verifies MATH  for every   MATH   with compact support. The reader 
 : [array(['with', 'the', 'math with', 'math for', 'math', 'for every', 'for',
       'every math', 'every'], dtype='<U24')],
 true: 0, pred: 0
395:  commutes with the dilations of   MATH  .
 : [array(['with the', 'with', 'the', 'of math', 'of', 'math'], dtype='<U24')],
 true: 0, pred: 0
396:  we obtain  Theorem 3.1  if   MATH  .
 : [array(['we obtain', 'we', 'theorem', 'obtain', 'math', 'if math', 'if'],
      dtype='<U24')],
 true: 0, pred: 0
398:  induction hypothesis, it follows that   MATH   where the last inequality holds 
 : [array(['where the', 'where', 'the last', 'the', 'that math', 'that',
       'math where', 'math', 'last', 'it follows', 'it',
       'inequality holds', 'inequality', 'induction', 'hypothesis',
       'holds', 'follows that', 'follows'], dtype='<U24')],
 true: 0, pred: 0
401:  v   are harmonic functions in   MATH  . If  D  is simply-connected, then 
 : [array(['then', 'math if', 'math', 'is', 'in math', 'in', 'if is', 'if',
       'harmonic', 'functions in', 'functions', 'are'], dtype='<U24')],
 true: 0, pred: 0
402:  Then we have  MATH Since   MATH   , a direct calculation completes the 
 : [array(['we have', 'we', 'then we', 'then', 'the', 'since math', 'since',
       'math since', 'math', 'have math', 'have', 'direct'], dtype='<U24')],
 true: 0, pred: 0
403:  recall that for a function   MATH   we have the pointwise convergence 
 : [array(['we have', 'we', 'the', 'that for', 'that', 'recall that',
       'recall', 'math we', 'math', 'have the', 'have', 'function math',
       'function', 'for'], dtype='<U24')],
 true: 0, pred: 0
404:  MATH  , one can express  MATH ,   MATH   by  MATH ,  MATH  , respectively. It 
 : [array(['respectively', 'one can', 'one', 'math respectively', 'math one',
       'math math', 'math by', 'math', 'it', 'express math', 'express',
       'can express', 'can', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
405:  MATH  is a diffeomorphism of  MATH  onto D.
 : [array(['onto', 'of math', 'of', 'math onto', 'math is', 'math',
       'is diffeomorphism', 'is', 'diffeomorphism of', 'diffeomorphism'],
      dtype='<U24')],
 true: 0, pred: 0
406:  that  MATH then, for any  MATH  and MATH with MATH  when 
 : [array(['with math', 'with', 'when', 'then for', 'then', 'that math',
       'that', 'math with', 'math when', 'math then', 'math and', 'math',
       'for any', 'for', 'any math', 'any', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
407:  MATH   satisfies the homogeneous equation  MATH   and the boundary condition   (5.4) 
 : [array(['the homogeneous', 'the boundary', 'the', 'satisfies the',
       'satisfies', 'math satisfies', 'math and', 'math', 'homogeneous',
       'equation math', 'equation', 'condition', 'boundary condition',
       'boundary', 'and the', 'and'], dtype='<U24')],
 true: 0, pred: 0
408: Let MATH be  MATH   weakly holomorphic eta quotient of 
 : [array(['weakly', 'quotient of', 'quotient', 'of', 'math be', 'math',
       'let math', 'let', 'holomorphic eta', 'holomorphic',
       'eta quotient', 'eta', 'be math', 'be'], dtype='<U24')],
 true: 0, pred: 0
409:  get  (1.11)  with the constant   MATH   given by MATH  We still 
 : [array(['with the', 'with', 'we still', 'we', 'the constant', 'the',
       'still', 'math we', 'math given', 'math', 'given by', 'given',
       'get', 'constant math', 'constant', 'by math', 'by', '11'],
      dtype='<U24')],
 true: 0, pred: 0
410:  and  MATH . Then MATH where  MATH  .
 : [array(['where math', 'where', 'then math', 'then', 'math where',
       'math then', 'math', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
411:  to  (3.9) , we get MATH  MATH  MATH MATH MATH MATH  MATH 
 : [array(['we get', 'we', 'to', 'math math', 'math', 'get math', 'get'],
      dtype='<U24')],
 true: 0, pred: 0
412:  becomes  MATH  and the boundaries   MATH   and  MATH  become MATH  with 
 : [array(['with', 'the boundaries', 'the', 'math with', 'math become',
       'math and', 'math', 'boundaries math', 'boundaries',
       'becomes math', 'becomes', 'become math', 'become', 'and the',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
414:  fix  MATH , then for every   MATH   such that MATH  estimates   (1.11) 
 : [array(['then for', 'then', 'that math', 'that', 'such that', 'such',
       'math then', 'math such', 'math', 'for every', 'for', 'fix math',
       'fix', 'every math', 'every', 'estimates', '11'], dtype='<U24')],
 true: 0, pred: 0
416: Let   MATH  . If  MATH  , then we have 
 : [array(['we have', 'we', 'then we', 'then', 'math then', 'math if', 'math',
       'let math', 'let', 'if math', 'if', 'have'], dtype='<U24')],
 true: 0, pred: 0
417:  MATH   be a basis of   MATH   over  MATH  and  MATH  be 
 : [array(['over math', 'over', 'of math', 'of', 'math over', 'math be',
       'math and', 'math', 'be basis', 'be', 'basis of', 'basis',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
418:  which is represented by point   MATH   on the shock polar (see 
 : [array(['which is', 'which', 'the shock', 'the', 'shock polar', 'shock',
       'see', 'represented by', 'represented', 'polar', 'point math',
       'point', 'on the', 'on', 'math on', 'math', 'is', 'by point', 'by'],
      dtype='<U24')],
 true: 1, pred: 1
419:  that  MATH  satisfies now becomes  MATH   Recalling  Remark 4.1  , we know 
 : [array(['we know', 'we', 'that math', 'that', 'satisfies', 'recalling',
       'now', 'math satisfies', 'math', 'know', 'becomes math', 'becomes'],
      dtype='<U24')],
 true: 0, pred: 0
420: Step 1:  MATH 
 : [array(['step math', 'step', 'math'], dtype='<U24')],
 true: 0, pred: 0
421:  have got the value of   MATH   and  MATH  , combining with equality 
 : [array(['with', 'value of', 'value', 'the value', 'the', 'of math', 'of',
       'math combining', 'math and', 'math', 'have', 'equality',
       'combining', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
422:  weight  MATH on MATH , where  MATH  . Then we have MATH
 : [array(['where math', 'where', 'weight math', 'weight', 'we have', 'we',
       'then we', 'then', 'on math', 'on', 'math where', 'math then',
       'math on', 'math', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
423:  is another representation of a   MATH  -polynomial as follows.
 : [array(['polynomial', 'of math', 'of', 'math', 'is', 'follows',
       'as follows', 'as'], dtype='<U24')],
 true: 0, pred: 0
424:  looking for a diagonalization of   MATH   , we perform an upper triangularization 
 : [array(['we', 'upper', 'of math', 'of', 'math we', 'math', 'for', 'an'],
      dtype='<U24')],
 true: 0, pred: 0
425:  choice of  Q , we have   MATH  MATH  on Σ which is 
 : [array(['which is', 'which', 'we have', 'we', 'on', 'of we', 'of',
       'math on', 'math math', 'math', 'is', 'have math', 'have',
       'choice'], dtype='<U24')],
 true: 0, pred: 0
426:  of  f  at the cusp   MATH   of  MATH  is the exponent 
 : [array(['the exponent', 'the', 'of math', 'of at', 'of', 'math of',
       'math is', 'math', 'is the', 'is', 'exponent', 'at the', 'at'],
      dtype='<U24')],
 true: 0, pred: 0
427:  MATH  , we will simply write   MATH   in place of  MATH .
 : [array(['write math', 'write', 'will', 'we will', 'we', 'of math', 'of',
       'math we', 'math in', 'math', 'in'], dtype='<U24')],
 true: 0, pred: 0
428:  MATH   becomes an angular domain   MATH  , and the edge  MATH  shrinks 
 : [array(['the', 'math becomes', 'math and', 'math', 'edge math', 'edge',
       'domain math', 'domain', 'becomes', 'angular domain', 'angular',
       'and the', 'and', 'an angular', 'an'], dtype='<U24')],
 true: 1, pred: 1
429:  MATH  , the Fourier transform of   MATH  , satisfies the following system:  MATH 
 : [array(['transform', 'the fourier', 'the following', 'the', 'system',
       'satisfies the', 'satisfies', 'of math', 'of', 'math the',
       'math satisfies', 'math', 'fourier transform', 'fourier',
       'following'], dtype='<U24')],
 true: 0, pred: 0
430:  defined in  (3)  is a   MATH   linear code over  MATH  with 
 : [array(['with', 'over math', 'over', 'math with', 'math linear', 'math',
       'linear code', 'linear', 'is math', 'is', 'in is', 'in',
       'defined in', 'defined', 'code over', 'code'], dtype='<U24')],
 true: 1, pred: 1
431:  obtained by multiplying  MATH  and   MATH   with a common denominator. The 
 : [array(['with', 'the', 'obtained', 'math with', 'math and', 'math', 'by',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
433:  we can get  MATH  where  MATH   Therefore, MATH MATH
 : [array(['where math', 'where', 'we can', 'we', 'therefore math',
       'therefore', 'math where', 'math therefore', 'math math', 'math',
       'get math', 'get', 'can get', 'can'], dtype='<U24')],
 true: 0, pred: 0
434:  over  MATH . Thus,  (7)  becomes   MATH 
 : [array(['thus', 'over math', 'over', 'math thus', 'math', 'becomes math',
       'becomes'], dtype='<U24')],
 true: 0, pred: 0
435:  Let  MATH . Then we have  MATH   We define the set   MATH 
 : [array(['we have', 'we define', 'we', 'then we', 'then', 'the set', 'the',
       'set math', 'set', 'math we', 'math then', 'math', 'let math',
       'let', 'have math', 'have', 'define the', 'define'], dtype='<U24')],
 true: 0, pred: 0
436: Assume that  MATH  Then there exists a  constant 
 : [array(['there exists', 'there', 'then there', 'then', 'that math', 'that',
       'math then', 'math', 'exists', 'constant', 'assume that', 'assume'],
      dtype='<U24')],
 true: 0, pred: 0
437:  of  MATH  are constants satisfying  MATH   Similarly, keeping the same argument 
 : [array(['the same', 'the', 'similarly', 'satisfying math', 'satisfying',
       'same', 'of math', 'of', 'math similarly', 'math are', 'math',
       'constants', 'argument', 'are'], dtype='<U24')],
 true: 0, pred: 0
438:  weight  MATH on MATH with  MATH  . Then we have MATH
 : [array(['with math', 'with', 'weight math', 'weight', 'we have', 'we',
       'then we', 'then', 'on math', 'on', 'math with', 'math then',
       'math on', 'math', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
439:  which  (4.7)  holds and let  MATH   We define MATH
 : [array(['which', 'we define', 'we', 'math we', 'math', 'let math', 'let',
       'holds', 'define math', 'define', 'and let', 'and'], dtype='<U24')],
 true: 0, pred: 0
440:  MATH  . Then  MATH  implies that   MATH  . From the definition of   MATH 
 : [array(['then math', 'then', 'the definition', 'the', 'that math', 'that',
       'of math', 'of', 'math then', 'math implies', 'math from', 'math',
       'implies that', 'implies', 'from the', 'from', 'definition of',
       'definition'], dtype='<U24')],
 true: 0, pred: 0
441:  columns  MATH  and  MATH ), where   MATH   is the image under the 
 : [array(['where math', 'where', 'under the', 'under', 'the image', 'the',
       'math where', 'math is', 'math and', 'math', 'is the', 'is',
       'image', 'columns math', 'columns', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
442:  basis of  MATH  over  MATH ,   MATH   is equivalent to  MATH  (  MATH 
 : [array(['to math', 'to', 'over math', 'over', 'of math', 'of', 'math over',
       'math math', 'math is', 'math', 'is equivalent', 'is',
       'equivalent to', 'equivalent', 'basis of', 'basis'], dtype='<U24')],
 true: 0, pred: 0
443:  exists  MATH such that if  MATH  then MATH , hence M  is 
 : [array(['then math', 'then', 'that if', 'that', 'such that', 'such',
       'math then', 'math such', 'math hence', 'math', 'is', 'if math',
       'if', 'hence', 'exists math', 'exists'], dtype='<U24')],
 true: 0, pred: 0
444:  define the operation  MATH  by  MATH   For  MATH , by  MATH  we 
 : [array(['we', 'the', 'math we', 'math for', 'math by', 'math', 'for math',
       'for', 'define the', 'define', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
445:  monotonicity properties of  Lemma 2.9  MATH   where we used that by 
 : [array(['where we', 'where', 'we used', 'we', 'used that', 'used',
       'that by', 'that', 'properties', 'of', 'math where', 'math',
       'lemma math', 'lemma', 'by'], dtype='<U24')],
 true: 0, pred: 0
446:  at  MATH  and therefore, if   MATH   is convex then  MATH 
 : [array(['therefore', 'then math', 'then', 'math is', 'math and', 'math',
       'is', 'if math', 'if', 'convex', 'at math', 'at', 'and therefore',
       'and'], dtype='<U24')],
 true: 0, pred: 0
448:  an open neighborhood  MATH  of   MATH   in Σ and a constant 
 : [array(['open neighborhood', 'open', 'of math', 'of', 'neighborhood math',
       'neighborhood', 'math of', 'math in', 'math', 'in and', 'in',
       'constant', 'and constant', 'and', 'an open', 'an'], dtype='<U24')],
 true: 0, pred: 0
450:  at every point, which means   MATH   is isoparametric. But from   [3] 
 : [array(['which means', 'which', 'point', 'means math', 'means', 'math is',
       'math', 'isoparametric', 'is', 'from', 'every', 'but', 'at'],
      dtype='<U24')],
 true: 0, pred: 0
451: Let  MATH  be a  free homogeneous Carnot 
 : [array(['math be', 'math', 'let math', 'let', 'homogeneous carnot',
       'homogeneous', 'free', 'carnot', 'be'], dtype='<U24')],
 true: 1, pred: 1
452:  under the polar coordinates for   MATH   as MATH  where MATH
 : [array(['where math', 'where', 'under the', 'under', 'the polar', 'the',
       'polar coordinates', 'polar', 'math where', 'math as', 'math',
       'for math', 'for', 'coordinates for', 'coordinates', 'as math',
       'as'], dtype='<U24')],
 true: 0, pred: 0
453:    Let  MATH ,  MATH ,  MATH ,   MATH   and  MATH  . Then the linear 
 : [array(['then the', 'then', 'the linear', 'the', 'math then', 'math math',
       'math and', 'math', 'linear', 'let math', 'let', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
454:  MATH   of  MATH  in which   MATH   such that MATH  for all 
 : [array(['which', 'that math', 'that', 'such that', 'such', 'of math', 'of',
       'math such', 'math of', 'math in', 'math for', 'math', 'in',
       'for all', 'for', 'all'], dtype='<U24')],
 true: 0, pred: 0
455:  such that  MATH and some  MATH  we have MATH  Then, by 
 : [array(['we have', 'we', 'then by', 'then', 'that math', 'that',
       'such that', 'such', 'some math', 'some', 'math we', 'math then',
       'math and', 'math', 'have math', 'have', 'by', 'and'], dtype='<U24')],
 true: 0, pred: 0
456:  functions in  MATH , that is,  MATH   The corresponding trace norm is 
 : [array(['trace norm', 'trace', 'the corresponding', 'the', 'that is',
       'that', 'norm is', 'norm', 'math the', 'math that', 'math',
       'is math', 'is', 'in math', 'in', 'functions in', 'functions',
       'corresponding'], dtype='<U24')],
 true: 0, pred: 0
457:  MATH   is a graph with   MATH   vertices that is regular of 
 : [array(['with math', 'with', 'vertices', 'that is', 'that', 'regular',
       'of', 'math is', 'math', 'is', 'graph with', 'graph'], dtype='<U24')],
 true: 1, pred: 1
458:  is always the case if   MATH   and  MATH .
 : [array(['the case', 'the', 'math and', 'math', 'is', 'if math', 'if',
       'case', 'and math', 'and', 'always'], dtype='<U24')],
 true: 0, pred: 0
459:  (5.5)   and  (5.6) , we obtain  MATH   Using  (5.7) , we have  MATH 
 : [array(['we obtain', 'we have', 'we', 'using', 'obtain math', 'obtain',
       'math using', 'math', 'have math', 'have', 'and we', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
460:  we have  MATH  Then, choosing   MATH   such that  MATH  , we have 
 : [array(['we have', 'we', 'then', 'that math', 'that', 'such that', 'such',
       'math we', 'math then', 'math such', 'math', 'have math', 'have',
       'choosing math', 'choosing'], dtype='<U24')],
 true: 0, pred: 0
461:  is locally Hölder continuous for   MATH  ,  MATH  and  MATH  such that 
 : [array(['that', 'such that', 'such', 'math such', 'math math', 'math and',
       'math', 'locally', 'is', 'hölder continuous', 'hölder', 'for math',
       'for', 'continuous', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
462: Let MATH be  MATH   non-negative bounded function that is, 
 : [array(['that is', 'that', 'non', 'negative', 'math be', 'math',
       'let math', 'let', 'is', 'function', 'bounded function', 'bounded',
       'be math', 'be'], dtype='<U24')],
 true: 0, pred: 0
463:  for some continuous  MATH  near   MATH  .
 : [array(['some continuous', 'some', 'near math', 'near', 'math near',
       'math', 'for some', 'for', 'continuous math', 'continuous'],
      dtype='<U24')],
 true: 0, pred: 0
464:  (A.11)  – (A.12) , that is,  MATH  satisfies (A.14) . Moreover, when  (A.14) 
 : [array(['when', 'that is', 'that', 'satisfies', 'moreover',
       'math satisfies', 'math', 'is math', 'is', '14', '12', '11'],
      dtype='<U24')],
 true: 0, pred: 0
465:  focus on the case when   MATH  . By  (4.7) , we have   MATH 
 : [array(['when math', 'when', 'we have', 'we', 'the case', 'the', 'on the',
       'on', 'math by', 'math', 'have math', 'have', 'case when', 'case',
       'by we', 'by'], dtype='<U24')],
 true: 0, pred: 0
468:  restrict  MATH  in the range   MATH  .
 : [array(['the', 'math in', 'math', 'in the', 'in'], dtype='<U24')],
 true: 0, pred: 0
469:  some  MATH  continuously invertible in   MATH  . For example, if  MATH  , then 
 : [array(['then', 'some math', 'some', 'math then', 'math for', 'math',
       'invertible in', 'invertible', 'in math', 'in', 'if math', 'if',
       'for example', 'for', 'example', 'continuously'], dtype='<U24')],
 true: 0, pred: 0
470:  that  MATH , where g and  MATH   are as mentioned earlier, is 
 : [array(['where', 'that math', 'that', 'math where', 'math are', 'math',
       'is', 'as', 'are', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
471:  value at each element of   MATH   is the absolute value of 
 : [array(['value of', 'value', 'the', 'of math', 'of', 'math is', 'math',
       'is the', 'is', 'element of', 'element', 'each', 'at'],
      dtype='<U24')],
 true: 0, pred: 0
472: Similarly if   MATH   is a triple root of 
 : [array(['similarly', 'root of', 'root', 'of', 'math is', 'math', 'is',
       'if math', 'if'], dtype='<U24')],
 true: 0, pred: 0
474: With the   MATH   well-posedness established in Step 3, 
 : [array(['with the', 'with', 'well', 'the math', 'the', 'step', 'math',
       'in', 'established'], dtype='<U24')],
 true: 0, pred: 0
475:  the third term, we have   MATH   Combining the above equalities, we 
 : [array(['we have', 'we', 'third term', 'third', 'the third', 'the above',
       'the', 'term we', 'term', 'math combining', 'math', 'have math',
       'have', 'equalities we', 'equalities', 'combining the',
       'combining', 'above equalities', 'above'], dtype='<U24')],
 true: 0, pred: 0
476:  group  MATH . Here  MATH  for   MATH  .
 : [array(['math here', 'math for', 'math', 'here math', 'here', 'group math',
       'group', 'for math', 'for'], dtype='<U24')],
 true: 0, pred: 0
477:  have  MATH Because  MATH  and   MATH   are dual bases, from   (9) 
 : [array(['math are', 'math and', 'math', 'have math', 'have', 'from',
       'dual bases', 'dual', 'because math', 'because', 'bases',
       'are dual', 'are', 'and math', 'and'], dtype='<U24')],
 true: 1, pred: 1
479:  the space of traces on   MATH   of the functions in   MATH 
 : [array(['traces on', 'traces', 'the space', 'the functions', 'the',
       'space of', 'space', 'on math', 'on', 'of traces', 'of the', 'of',
       'math of', 'math', 'in math', 'in', 'functions in', 'functions'],
      dtype='<U24')],
 true: 0, pred: 0
482:  we get  MATH  which implies   MATH  Similarly, we have  MATH  , where 
 : [array(['which implies', 'which', 'where', 'we have', 'we get', 'we',
       'similarly we', 'similarly', 'math which', 'math where',
       'math similarly', 'math', 'implies math', 'implies', 'have math',
       'have', 'get math', 'get'], dtype='<U24')],
 true: 0, pred: 0
483:  and all  MATH . Converting into   MATH  , we have MATH  Therefore  MATH 
 : [array(['we have', 'we', 'therefore math', 'therefore', 'math we',
       'math therefore', 'math', 'into math', 'into', 'have math', 'have',
       'and all', 'and', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
484:  for every  MATH  we get  MATH   and observe that the second 
 : [array(['we get', 'we', 'the second', 'the', 'that the', 'that', 'second',
       'observe that', 'observe', 'math we', 'math and', 'math',
       'get math', 'get', 'for every', 'for', 'every math', 'every',
       'and'], dtype='<U24')],
 true: 0, pred: 0
485:  the sequel, let  MATH  and   MATH   be two positive integers with 
 : [array(['with', 'two positive', 'two', 'the', 'positive integers',
       'positive', 'math be', 'math and', 'math', 'let math', 'let',
       'integers with', 'integers', 'be two', 'be', 'and math', 'and'],
      dtype='<U24')],
 true: 1, pred: 1
487:  exactly get  (1.10) . The constant   MATH   appearing in  (1.10)  is given 
 : [array(['the constant', 'the', 'math', 'is given', 'is', 'in 10', 'in',
       'given', 'get', 'exactly', 'constant math', 'constant', '10'],
      dtype='<U24')],
 true: 0, pred: 0
489:  before, in Case I, all   MATH   except  MATH  and  MATH  . And 
 : [array(['math except', 'math and', 'math', 'in case', 'in', 'except math',
       'except', 'case', 'before', 'and math', 'and', 'all math', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
490: Note that   MATH  Since  MATH  is a basis 
 : [array(['that math', 'that', 'since math', 'since', 'note that', 'note',
       'math since', 'math is', 'math', 'is basis', 'is', 'basis'],
      dtype='<U24')],
 true: 0, pred: 0
491:  are as mentioned earlier, is   MATH   Lipschitz weak homeomorphism from the 
 : [array(['weak', 'the', 'math lipschitz', 'math', 'lipschitz', 'is math',
       'is', 'homeomorphism', 'from the', 'from', 'as', 'are'],
      dtype='<U24')],
 true: 0, pred: 0
493:  MATH   (see  [7] ). We identify   MATH   with  MATH  via the canonical 
 : [array(['with math', 'with', 'we', 'via', 'the canonical', 'the', 'see',
       'math with', 'math see', 'math', 'canonical'], dtype='<U24')],
 true: 0, pred: 0
494:  particular,  S can only be  MATH  .
 : [array(['particular', 'only', 'math', 'can', 'be math', 'be'], dtype='<U24')],
 true: 0, pred: 0
495:  the other hand  MATH  on   MATH   and by definition of   MATH 
 : [array(['the other', 'the', 'other hand', 'other', 'on math', 'on',
       'of math', 'of', 'math on', 'math and', 'math', 'hand',
       'definition of', 'definition', 'by definition', 'by', 'and by',
       'and'], dtype='<U24')],
 true: 0, pred: 0
497:  MATH  , where  MATH . Due to   MATH  , we get  MATH  which implies 
 : [array(['which implies', 'which', 'where math', 'where', 'we get', 'we',
       'to math', 'to', 'math which', 'math where', 'math we', 'math',
       'implies', 'get math', 'get', 'due'], dtype='<U24')],
 true: 0, pred: 0
498:  MATH   Since  MATH , that leaves  MATH   which contradicts  MATH  . Hence the 
 : [array(['which contradicts', 'which', 'the', 'that', 'since math', 'since',
       'math which', 'math that', 'math since', 'math hence', 'math',
       'hence', 'contradicts'], dtype='<U24')],
 true: 0, pred: 0
499:  are easy to check if   MATH   is a prime power. The 
 : [array(['to check', 'to', 'the', 'prime power', 'prime', 'power',
       'math is', 'math', 'is', 'if math', 'if', 'easy to', 'easy',
       'check', 'are'], dtype='<U24')],
 true: 0, pred: 0
500:  MATH  : MATH  where we note   MATH   at  MATH .
 : [array(['where we', 'where', 'we', 'note', 'math where', 'math math',
       'math at', 'math', 'at math', 'at'], dtype='<U24')],
 true: 0, pred: 0
501:  relation “  MATH ” in   MATH   by  MATH  iff  MATH  . Let 
 : [array(['relation', 'math let', 'math in', 'math iff', 'math by', 'math',
       'let', 'in math', 'in', 'iff math', 'iff', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
502:  the boundary condition  (7.4)  on   MATH  , MATH  which implies MATH
 : [array(['which implies', 'which', 'the boundary', 'the', 'on math', 'on',
       'math which', 'math math', 'math', 'implies math', 'implies',
       'condition', 'boundary condition', 'boundary'], dtype='<U24')],
 true: 0, pred: 0
503:  desired decay estimate  MATH  Let   MATH  , by using that  MATH  converges 
 : [array(['using that', 'using', 'that math', 'that', 'math let',
       'math converges', 'math by', 'math', 'let math', 'let',
       'estimate math', 'estimate', 'desired', 'converges', 'by using',
       'by'], dtype='<U24')],
 true: 0, pred: 0
504:  neighborhood  MATH  of  MATH  where   MATH   is continuously invertible. Then we 
 : [array(['where math', 'where', 'we', 'then we', 'then', 'of math', 'of',
       'neighborhood math', 'neighborhood', 'math where', 'math of',
       'math is', 'math', 'is', 'invertible', 'continuously'],
      dtype='<U24')],
 true: 0, pred: 0
505:  details). And if  MATH , then  MATH   (Please see  [11]  for details.) 
 : [array(['then math', 'then', 'see', 'math then', 'math', 'if math', 'if',
       'for', 'and', '11'], dtype='<U24')],
 true: 0, pred: 0
506:  Case I, we can rotate   MATH   and  MATH , such that   MATH 
 : [array(['we can', 'we', 'that math', 'that', 'such that', 'such',
       'math such', 'math and', 'math', 'case we', 'case', 'can',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
507:  MATH   or  MATH   The desired results will be 
 : [array(['will be', 'will', 'the desired', 'the', 'or math', 'or',
       'math the', 'math or', 'math', 'desired', 'be'], dtype='<U24')],
 true: 0, pred: 0
508:  the row of  MATH  (resp.   MATH  ) indexed by  MATH  . For example, 
 : [array(['the', 'resp', 'of math', 'of', 'math resp', 'math for', 'math',
       'for example', 'for', 'example', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
509:  MATH   Using the boundedness of   MATH   in  MATH  and summing up 
 : [array(['using the', 'using', 'up', 'the', 'summing', 'of math', 'of',
       'math using', 'math in', 'math and', 'math', 'in math', 'in',
       'and'], dtype='<U24')],
 true: 0, pred: 0
510:  Δ, and hence we have   MATH   for all  MATH  with   MATH 
 : [array(['with math', 'with', 'we have', 'we', 'math with', 'math for',
       'math', 'hence we', 'hence', 'have math', 'have', 'for all', 'for',
       'and hence', 'and', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
511:  is the Hermitian transpose of   MATH  . The positivity of  MATH  implies 
 : [array(['the', 'of math', 'of', 'math the', 'math implies', 'math',
       'is the', 'is', 'implies'], dtype='<U24')],
 true: 0, pred: 0
513:  variables and by observing that   MATH   still by  Lemma 2.9  we 
 : [array(['we', 'variables', 'that math', 'that', 'still', 'observing that',
       'observing', 'math', 'lemma we', 'lemma', 'by lemma', 'by',
       'and by', 'and'], dtype='<U24')],
 true: 0, pred: 0
515:  when  MATH  under the condition   MATH   or  MATH  . Similarly as in 
 : [array(['when math', 'when', 'under the', 'under', 'the condition', 'the',
       'similarly as', 'similarly', 'or math', 'or', 'math under',
       'math similarly', 'math or', 'math', 'in', 'condition math',
       'condition', 'as in', 'as'], dtype='<U24')],
 true: 0, pred: 0
516:  a diffeomorphism of  U  onto   MATH   if and only if  MATH 
 : [array(['onto math', 'onto', 'only if', 'only', 'of onto', 'of', 'math if',
       'math', 'if math', 'if and', 'if', 'diffeomorphism of',
       'diffeomorphism', 'and only', 'and'], dtype='<U24')],
 true: 0, pred: 0
517:  that  MATH  are real. Thus   MATH  , but  MATH  and  MATH  . This 
 : [array(['thus math', 'thus', 'this', 'that math', 'that', 'real',
       'math this', 'math but', 'math are', 'math and', 'math',
       'but math', 'but', 'are', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
518:  In this case, recalling that   MATH  (7.3)  reduces to MATH  which 
 : [array(['which', 'to math', 'to', 'this case', 'this', 'that math', 'that',
       'recalling that', 'recalling', 'math which', 'math', 'in this',
       'in', 'case'], dtype='<U24')],
 true: 0, pred: 0
519:  boundaries  MATH  and  MATH  become  MATH   where MATH  The boundary condition 
 : [array(['where math', 'where', 'the boundary', 'the', 'math where',
       'math the', 'math become', 'math and', 'math', 'condition',
       'boundary condition', 'boundary', 'boundaries math', 'boundaries',
       'become math', 'become', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
520:  fields on  MATH  such that   MATH   for  MATH . Then MATH  for 
 : [array(['then math', 'then', 'that math', 'that', 'such that', 'such',
       'on math', 'on', 'math then', 'math such', 'math for', 'math',
       'for math', 'for', 'fields'], dtype='<U24')],
 true: 0, pred: 0
522:  on suitable congruence subgroups of   MATH   : The largest among these subgroups 
 : [array(['these', 'the', 'on', 'of math', 'of', 'math the', 'math'],
      dtype='<U24')],
 true: 0, pred: 0
523:  analogy of the Newton potential   MATH   where MATH  is the fundamental 
 : [array(['where math', 'where', 'the newton', 'the fundamental', 'the',
       'potential math', 'potential', 'of the', 'of', 'newton potential',
       'newton', 'math where', 'math is', 'math', 'is the', 'is',
       'fundamental'], dtype='<U24')],
 true: 0, pred: 0
525:  the derivative of  MATH  at   MATH  , we obtain MATH  Since the 
 : [array(['we obtain', 'we', 'the derivative', 'the', 'since the', 'since',
       'of math', 'of', 'obtain math', 'obtain', 'math we', 'math since',
       'math at', 'math', 'derivative of', 'derivative', 'at math', 'at'],
      dtype='<U24')],
 true: 0, pred: 0
527:  MATH   where  MATH  for some   MATH   with  MATH  (hence, replacing   a 
 : [array(['with math', 'with', 'where math', 'where', 'some math', 'some',
       'replacing', 'math with', 'math where', 'math hence', 'math for',
       'math', 'hence', 'for some', 'for'], dtype='<U24')],
 true: 0, pred: 0
528: Let  MATH   be an admissible domain and 
 : [array(['math be', 'math', 'let math', 'let', 'domain and', 'domain',
       'be an', 'be', 'and', 'an admissible', 'an', 'admissible domain',
       'admissible'], dtype='<U24')],
 true: 0, pred: 0
529:  the  Atkin–Lehner map MATH  by  MATH   Since  MATH  is a boolean 
 : [array(['the', 'since math', 'since', 'math since', 'math is', 'math by',
       'math', 'map math', 'map', 'is', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
530:  the claim is true for   MATH   . Also, by using the definition 
 : [array(['using the', 'using', 'true', 'the definition', 'the claim', 'the',
       'math also', 'math', 'is', 'for math', 'for', 'definition',
       'claim', 'by using', 'by', 'also'], dtype='<U24')],
 true: 0, pred: 0
533:  be that if  MATH  for   MATH   then  u  defined by   (5.1) 
 : [array(['then', 'that if', 'that', 'math then', 'math for', 'math',
       'if math', 'if', 'for math', 'for', 'defined by', 'defined', 'by',
       'be'], dtype='<U24')],
 true: 0, pred: 0
534:  MATH   into  (3.39) , we get  MATH   Similarly, for the first term, 
 : [array(['we get', 'we', 'the first', 'the', 'term', 'similarly',
       'math similarly', 'math into', 'math', 'into 39', 'into',
       'get math', 'get', 'for the', 'for', 'first term', 'first',
       '39 we', '39'], dtype='<U24')],
 true: 0, pred: 0
535:  MATH  in an admissible domain  MATH  , then MATH
 : [array(['then math', 'then', 'math then', 'math in', 'math', 'in',
       'domain math', 'domain', 'an admissible', 'an',
       'admissible domain', 'admissible'], dtype='<U24')],
 true: 0, pred: 0
536:  Velocity  Du  decays slower than   MATH   as  MATH , while  Du  decays 
 : [array(['while', 'velocity', 'than math', 'than', 'slower than', 'slower',
       'math while', 'math as', 'math', 'du', 'decays slower', 'decays',
       'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
537:  For instance, the Heisenberg group   MATH   is a free Carnot group. 
 : [array(['the', 'math is', 'math', 'is', 'instance', 'group math', 'group',
       'free', 'for instance', 'for', 'carnot group', 'carnot'],
      dtype='<U24')],
 true: 1, pred: 1
538:  the standard Lebesque measure on   MATH   is the Haar measure for 
 : [array(['the standard', 'the', 'standard', 'on math', 'on', 'measure',
       'math is', 'math', 'is the', 'is', 'for'], dtype='<U24')],
 true: 0, pred: 0
539:  the two balls  MATH  and   MATH   is such that MATH
 : [array(['two', 'the', 'that math', 'that', 'such that', 'such', 'math is',
       'math and', 'math', 'is such', 'is', 'balls math', 'balls',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
540:  the boundary condition  (3.8)  becomes  MATH   where MATH
 : [array(['where math', 'where', 'the boundary', 'the', 'math where', 'math',
       'condition becomes', 'condition', 'boundary condition', 'boundary',
       'becomes math', 'becomes'], dtype='<U24')],
 true: 0, pred: 0
541: Step 5:  MATH 
 : [array(['step math', 'step', 'math'], dtype='<U24')],
 true: 0, pred: 0
543:  Then two bases  MATH  and   MATH   are said to be   dual 
 : [array(['two', 'to be', 'to', 'then', 'said to', 'said', 'math are',
       'math and', 'math', 'dual', 'be', 'bases', 'are', 'and math',
       'and'], dtype='<U24')],
 true: 1, pred: 1
544:  MATH   Note that  MATH  and   MATH   together indicate MATH  Combining   MATH 
 : [array(['together', 'that math', 'that', 'note that', 'note',
       'math together', 'math note', 'math combining', 'math and', 'math',
       'combining', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
545:  we have  MATH , which means   MATH  , and hence  MATH  . Moreover, if 
 : [array(['which means', 'which', 'we have', 'we', 'moreover', 'means math',
       'means', 'math which', 'math moreover', 'math and', 'math', 'if',
       'hence math', 'hence', 'have math', 'have', 'and hence', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
546: If   MATH  , then for the fixed   MATH 
 : [array(['then for', 'then', 'the fixed', 'the', 'math then', 'math',
       'if math', 'if', 'for the', 'for', 'fixed math', 'fixed'],
      dtype='<U24')],
 true: 0, pred: 0
548: Let  MATH  , for every MATH  we have 
 : [array(['we have', 'we', 'math we', 'math for', 'math', 'let math', 'let',
       'have', 'for every', 'for', 'every math', 'every'], dtype='<U24')],
 true: 0, pred: 0
549:  function. For any positive integer   MATH   dividing  MATH  , the norm function 
 : [array(['the norm', 'the', 'positive integer', 'positive', 'norm',
       'math the', 'math', 'integer math', 'integer', 'function',
       'for any', 'for', 'dividing math', 'dividing', 'any'], dtype='<U24')],
 true: 1, pred: 1
550:  the  MATH -gauge distance and  MATH   If  MATH  on ∂Ω, the 
 : [array(['the math', 'the', 'on the', 'on', 'math on', 'math if',
       'math gauge', 'math', 'if math', 'if', 'gauge', 'distance',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
551:  For every  MATH there holds  MATH  for a constant MATH .
 : [array(['there holds', 'there', 'math there', 'math for', 'math',
       'holds math', 'holds', 'for every', 'for', 'every math', 'every',
       'constant math', 'constant'], dtype='<U24')],
 true: 0, pred: 0
552:  cusps of  MATH  (see  [7,11] ):  MATH   where  MATH  if and only 
 : [array(['where math', 'where', 'see', 'only', 'of math', 'of',
       'math where', 'math see', 'math if', 'math', 'if and', 'if',
       'cusps', 'and only', 'and', '11'], dtype='<U24')],
 true: 0, pred: 0
553:  case  MATH . In this case   MATH   are purely imaginary. Since   MATH 
 : [array(['this case', 'this', 'since math', 'since', 'purely imaginary',
       'purely', 'math in', 'math are', 'math', 'in this', 'in',
       'imaginary', 'case math', 'case', 'are'], dtype='<U24')],
 true: 0, pred: 0
554:  write  MATH . Otherwise, we write   MATH  . In particular, for  MATH  , the 
 : [array(['write math', 'write', 'we write', 'we', 'the', 'particular for',
       'particular', 'otherwise', 'math the', 'math otherwise', 'math in',
       'math', 'in particular', 'in', 'for math', 'for'], dtype='<U24')],
 true: 0, pred: 0
555:  MATH   have opposite signs to   MATH   respectively. If  MATH  , we have 
 : [array(['we have', 'we', 'to math', 'to', 'signs', 'respectively',
       'opposite', 'math we', 'math respectively', 'math have', 'math',
       'if math', 'if', 'have'], dtype='<U24')],
 true: 0, pred: 0
556:  Let   MATH  ,  MATH ,  MATH ,  MATH  and   MATH 
 : [array(['math math', 'math and', 'math', 'let math', 'let', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
557:  under the condition  MATH  or   MATH   the roots to  (5.3)  are 
 : [array(['under the', 'under', 'to', 'the roots', 'the condition', 'the',
       'roots', 'or math', 'or', 'math the', 'math or', 'math',
       'condition math', 'condition', 'are'], dtype='<U24')],
 true: 0, pred: 0
560: Case  MATH   If there are three distinct 
 : [array(['there are', 'there', 'math if', 'math', 'if there', 'if',
       'distinct', 'case math', 'case', 'are'], dtype='<U24')],
 true: 0, pred: 0
561: By  MATH , we get   MATH  . Suppose  MATH  is a positive 
 : [array(['we get', 'we', 'suppose math', 'suppose', 'positive', 'math we',
       'math suppose', 'math is', 'math', 'is positive', 'is', 'get math',
       'get', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
563:  that if  MATH , then either   MATH   or  MATH  . And the latter 
 : [array(['then', 'the', 'that if', 'that', 'or math', 'or', 'math then',
       'math or', 'math and', 'math', 'if math', 'if', 'either math',
       'either', 'and the', 'and'], dtype='<U24')],
 true: 0, pred: 0
564:  linear codes from  MATH  and   MATH  . Let  MATH , where  MATH  and 
 : [array(['where math', 'where', 'math where', 'math let', 'math and',
       'math', 'linear codes', 'linear', 'let math', 'let', 'from math',
       'from', 'codes', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
565:  is non-singular. Then we have   MATH  . From the definition of   MATH 
 : [array(['we have', 'we', 'then we', 'then', 'the definition', 'the',
       'of math', 'of', 'non', 'math from', 'math', 'is', 'have math',
       'have', 'from the', 'from', 'definition of', 'definition'],
      dtype='<U24')],
 true: 0, pred: 0
566:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
568:  of degree   0 , such that  MATH  where θ  is homogeneous of 
 : [array(['where is', 'where', 'that math', 'that', 'such that', 'such',
       'of degree', 'of', 'math where', 'math', 'is homogeneous', 'is',
       'homogeneous of', 'homogeneous', 'degree'], dtype='<U24')],
 true: 0, pred: 0
569: For   MATH  , we have  MATH  . So, the 
 : [array(['we have', 'we', 'the', 'so', 'math we', 'math so', 'math',
       'have math', 'have', 'for math', 'for'], dtype='<U24')],
 true: 0, pred: 0
570:  corresponding partial hodograph transformation is   MATH   It is invertible since   MATH 
 : [array(['transformation', 'since math', 'since', 'partial hodograph',
       'partial', 'math it', 'math', 'it is', 'it', 'is math',
       'is invertible', 'is', 'invertible', 'hodograph transformation',
       'hodograph', 'corresponding'], dtype='<U24')],
 true: 0, pred: 0
571:  the lemma holds trivially for   MATH   . We proceed by induction on 
 : [array(['we proceed', 'we', 'trivially', 'the lemma', 'the', 'proceed',
       'on', 'math we', 'math', 'lemma', 'induction', 'holds', 'for math',
       'for', 'by'], dtype='<U24')],
 true: 0, pred: 0
572:  any  MATH and MATH with  MATH  when MATH with MATH  and 
 : [array(['with math', 'with', 'when math', 'when', 'math with', 'math when',
       'math and', 'math', 'any math', 'any', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
573:  MATH  and MATH such that  MATH  Then for every MATH  we 
 : [array(['we', 'then for', 'then', 'that math', 'that', 'such that', 'such',
       'math we', 'math then', 'math such', 'math and', 'math',
       'for every', 'for', 'every math', 'every', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
575:  The boundary condition  (8.2)  becomes  MATH   and the boundary condition   (8.3) 
 : [array(['the boundary', 'the', 'math and', 'math', 'condition becomes',
       'condition', 'boundary condition', 'boundary', 'becomes math',
       'becomes', 'and the', 'and'], dtype='<U24')],
 true: 0, pred: 0
576:  due to the fact that   MATH   we obtain that  MATH  which 
 : [array(['which', 'we obtain', 'we', 'to the', 'to', 'the fact', 'the',
       'that math', 'that', 'obtain that', 'obtain', 'math which',
       'math we', 'math', 'fact that', 'fact', 'due'], dtype='<U24')],
 true: 0, pred: 0
577:  of  (4.21) , with the term   MATH   defined in  (1.9)  replaced by 
 : [array(['with the', 'with', 'the', 'term math', 'term', 'of',
       'math defined', 'math', 'in', 'defined in', 'defined', 'by', '21'],
      dtype='<U24')],
 true: 0, pred: 0
578:  which improves the differentiability of   MATH   . We notice that the case 
 : [array(['which', 'we', 'the case', 'the', 'that the', 'that', 'of math',
       'of', 'notice that', 'notice', 'math we', 'math',
       'differentiability', 'case'], dtype='<U24')],
 true: 0, pred: 0
579:  for  MATH  and  MATH  on   MATH  : MATH  where   MATH 
 : [array(['where math', 'where', 'on math', 'on', 'math where', 'math on',
       'math math', 'math and', 'math', 'for math', 'for', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
581:  (B.1)   to get MATH  where   MATH   . By putting all the estimates 
 : [array(['where math', 'where', 'to get', 'to', 'the estimates', 'the',
       'math where', 'math by', 'math', 'get math', 'get', 'estimates',
       'by', 'all the', 'all'], dtype='<U24')],
 true: 0, pred: 0
582:  MATH  . For  MATH  and for   MATH   with  MATH , we have  MATH 
 : [array(['with math', 'with', 'we have', 'we', 'math with', 'math we',
       'math for', 'math and', 'math', 'have math', 'have', 'for math',
       'for', 'and for', 'and'], dtype='<U24')],
 true: 0, pred: 0
584:  domain. For  MATH , we denote   MATH  . Then for  MATH  , we consider 
 : [array(['we denote', 'we consider', 'we', 'then for', 'then', 'math we',
       'math then', 'math', 'for math', 'for', 'domain for', 'domain',
       'denote math', 'denote', 'consider'], dtype='<U24')],
 true: 0, pred: 0
585:  the width of the cusp   MATH   (see  [7,14]  ). The following is 
 : [array(['the following', 'the', 'see', 'of the', 'of', 'math see', 'math',
       'is', 'following', '14'], dtype='<U24')],
 true: 0, pred: 0
586:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
587: (ii)  If MATH and  MATH  is odd, then MATH  of 
 : [array(['then math', 'then', 'of', 'odd then', 'odd', 'math of', 'math is',
       'math and', 'math', 'is odd', 'is', 'ii if', 'ii', 'if math', 'if',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
588:  spatial dimensions with Mach number   MATH   , the vortex sheets are violently 
 : [array(['with', 'vortex', 'the', 'sheets', 'number math', 'number',
       'math the', 'math', 'are'], dtype='<U24')],
 true: 1, pred: 1
589:  we know that  MATH  and   MATH  . Using  (4.5)  , we can have 
 : [array(['we know', 'we can', 'we', 'using', 'that math', 'that',
       'math using', 'math and', 'math', 'know that', 'know', 'have',
       'can', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
590:  get that  MATH  which contradicts   MATH   . Therefore, there do not exist 
 : [array(['which contradicts', 'which', 'therefore', 'there', 'that math',
       'that', 'not', 'math which', 'math therefore', 'math', 'get that',
       'get', 'exist', 'do not', 'do', 'contradicts'], dtype='<U24')],
 true: 0, pred: 0
593:  a basis of  MATH  over   MATH   and  MATH  be a basis 
 : [array(['over math', 'over', 'of math', 'of', 'math over', 'math be',
       'math and', 'math', 'be basis', 'be', 'basis of', 'basis',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
594:  above argument for  σ  satisfying  MATH 
 : [array(['satisfying math', 'satisfying', 'math', 'for', 'argument',
       'above'], dtype='<U24')],
 true: 0, pred: 0
595:  MATH   for all  MATH  with   MATH   and all  MATH  . Thus from 
 : [array(['with math', 'with', 'thus from', 'thus', 'math with', 'math thus',
       'math for', 'math and', 'math', 'from', 'for all', 'for',
       'and all', 'and', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
596:  point  P of MATH , then  MATH  has nonnegative scalar curvature.
 : [array(['then math', 'then', 'scalar curvature', 'scalar', 'point of',
       'point', 'of math', 'of', 'nonnegative', 'math then', 'math has',
       'math', 'has', 'curvature'], dtype='<U24')],
 true: 0, pred: 0
597:  the  canonical additive character  of   MATH   . We denote the canonical additive 
 : [array(['we denote', 'we', 'the canonical', 'the', 'of math', 'of',
       'math we', 'math', 'denote the', 'denote', 'character of',
       'character', 'canonical', 'additive character', 'additive'],
      dtype='<U24')],
 true: 0, pred: 0
598:  can vanish on Σ. Setting   MATH  , it is obvious that   MATH 
 : [array(['vanish', 'that math', 'that', 'setting math', 'setting', 'on',
       'math it', 'math', 'it is', 'it', 'is', 'can'], dtype='<U24')],
 true: 0, pred: 0
599:  it was improved to the   MATH   and Hölder well-posedness in Maz'ya–Plamenevskij 
 : [array(['well', 'to the', 'to', 'the math', 'the', 'math and', 'math',
       'it', 'in', 'hölder', 'and'], dtype='<U24')],
 true: 0, pred: 0
600:  this point  p , we have  MATH 
 : [array(['we have', 'we', 'this', 'point', 'math', 'have math', 'have'],
      dtype='<U24')],
 true: 0, pred: 0
601:    Let  MATH ,  MATH ,   MATH  ,  MATH  and  MATH  . Then the 
 : [array(['then the', 'then', 'the', 'math then', 'math math', 'math and',
       'math', 'let math', 'let', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
602:  and constant mean curvature in   MATH   is isoparametric
 : [array(['mean curvature', 'mean', 'math is', 'math', 'isoparametric', 'is',
       'in math', 'in', 'curvature', 'constant', 'and constant', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
603:  Lemma 1  . Since  MATH  as   MATH  , for all sufficiently large   MATH 
 : [array(['sufficiently', 'since math', 'since', 'math for', 'math as',
       'math', 'lemma', 'for all', 'for', 'as math', 'as', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
604: Let  MATH ,   MATH  ,  MATH , and  MATH  . Define the 
 : [array(['the', 'math math', 'math define', 'math and', 'math', 'let math',
       'let', 'define the', 'define', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
605:  general situation where  MATH  for   MATH  ,  y ,  p ,  MATH  and   MATH 
 : [array(['where math', 'where', 'situation', 'math math', 'math for',
       'math and', 'math', 'general', 'for math', 'for', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
606:  MATH   and  MATH  depending on   MATH   and Λ only. This concludes 
 : [array(['this', 'only', 'on math', 'on', 'math depending', 'math and',
       'math', 'depending on', 'depending', 'and only', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
607:  MATH   Hence either  MATH  or   MATH   . We will only present the 
 : [array(['will', 'we will', 'we', 'the', 'or math', 'or', 'only', 'math we',
       'math or', 'math hence', 'math', 'hence', 'either math', 'either'],
      dtype='<U24')],
 true: 0, pred: 0
608:  in  Lemma 2.9 , we have  MATH   With a simple change of 
 : [array(['with', 'we have', 'we', 'simple', 'of', 'math with', 'math',
       'lemma we', 'lemma', 'in lemma', 'in', 'have math', 'have',
       'change of', 'change'], dtype='<U24')],
 true: 0, pred: 0
609:  be written as  MATH  where  MATH   with  MATH  being the sonic 
 : [array(['with math', 'with', 'where math', 'where', 'the', 'math with',
       'math where', 'math', 'be', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
610:  there exist constants  MATH and  MATH   depending on the background solution 
 : [array(['there exist', 'there', 'the', 'solution', 'on the', 'on',
       'math depending', 'math and', 'math', 'exist', 'depending on',
       'depending', 'constants math', 'constants', 'and math', 'and'],
      dtype='<U24')],
 true: 1, pred: 1
611:  MATH   Hence we have proved   MATH   with  MATH  are all simple 
 : [array(['with math', 'with', 'we have', 'we', 'simple', 'proved math',
       'proved', 'math with', 'math hence', 'math are', 'math',
       'hence we', 'hence', 'have', 'are all', 'are', 'all'], dtype='<U24')],
 true: 0, pred: 0
612:  suppose that both  MATH and  MATH  satisfy (4.4) , and MATH  . Assume 
 : [array(['that', 'suppose that', 'suppose', 'satisfy', 'math satisfy',
       'math assume', 'math and', 'math', 'both math', 'both', 'assume',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
614:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
615:  Cartan formula for  MATH  gives  MATH   where MATH  is the contraction 
 : [array(['where math', 'where', 'the', 'math where', 'math is',
       'math gives', 'math', 'is the', 'is', 'gives math', 'gives',
       'formula', 'for math', 'for', 'contraction', 'cartan'],
      dtype='<U24')],
 true: 0, pred: 0
617:  MATH  with S  =  constant. If  MATH  , then MATH . Moreover, MATH  is 
 : [array(['with constant', 'with', 'then math', 'then', 'moreover',
       'math with', 'math then', 'math moreover', 'math is', 'math', 'is',
       'if math', 'if', 'constant if', 'constant'], dtype='<U24')],
 true: 0, pred: 0
618:  MATH   the negative component of   MATH  , i.e.  MATH .
 : [array(['the', 'of math', 'of', 'negative', 'math the', 'math math',
       'math', 'component'], dtype='<U24')],
 true: 0, pred: 0
619:  to remove the dependence on   MATH   and the fact that   MATH 
 : [array(['to', 'the fact', 'the', 'that math', 'that', 'on math', 'on',
       'math and', 'math', 'fact that', 'fact', 'and the', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
620: If  MATH , we have   MATH   is purely imaginary. Without loss 
 : [array(['without loss', 'without', 'we have', 'we', 'purely imaginary',
       'purely', 'math we', 'math is', 'math', 'loss', 'is', 'imaginary',
       'if math', 'if', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
621:  have  MATH  thus we get  MATH   where ∇ denotes the gradient 
 : [array(['where', 'we get', 'we', 'thus we', 'thus', 'the', 'math where',
       'math thus', 'math', 'have math', 'have', 'gradient', 'get math',
       'get', 'denotes the', 'denotes'], dtype='<U24')],
 true: 0, pred: 0
622:  in the Lopatinskii matrix by   MATH   Since every element of   MATH 
 : [array(['the lopatinskii', 'the', 'since', 'of math', 'of', 'matrix',
       'math since', 'math', 'lopatinskii', 'in the', 'in', 'every',
       'element of', 'element', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
623:  as desired, with the constant   MATH   given by MATH  and   MATH 
 : [array(['with the', 'with', 'the constant', 'the', 'math given',
       'math and', 'math', 'given by', 'given', 'desired',
       'constant math', 'constant', 'by math', 'by', 'as', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
624:  k,  MATH MATH More precisely,  MATH  MATH MATH MATH Therefore  MATH 
 : [array(['therefore math', 'therefore', 'precisely math', 'precisely',
       'more precisely', 'more', 'math therefore', 'math more',
       'math math', 'math'], dtype='<U24')],
 true: 0, pred: 0
625:  MATH   at  p , for all   MATH  . Then at this point   p 
 : [array(['this', 'then', 'point', 'math then', 'math at', 'math', 'for all',
       'for', 'at', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
626: For the case   MATH   , T. Lusala, M. Scherfner and 
 : [array(['the case', 'the', 'math', 'for the', 'for', 'case math', 'case',
       'and'], dtype='<U24')],
 true: 0, pred: 0
627:  of the boundary value problem   MATH   we get that  MATH  , for 
 : [array(['we get', 'we', 'value problem', 'value', 'the boundary', 'the',
       'that math', 'that', 'problem math', 'problem', 'of the', 'of',
       'math we', 'math for', 'math', 'get that', 'get', 'for',
       'boundary value', 'boundary'], dtype='<U24')],
 true: 0, pred: 0
628:  is satisfied if we put   MATH   For all  MATH  , we set 
 : [array(['we set', 'we', 'set', 'put math', 'put', 'math we', 'math for',
       'math', 'is', 'if we', 'if', 'for all', 'for', 'all math', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
629:  the second inequality holds since   MATH  . Thus, from  (5.11)  and   (5.12) 
 : [array(['thus from', 'thus', 'the second', 'the', 'since math', 'since',
       'second', 'math thus', 'math', 'inequality holds', 'inequality',
       'holds', 'from', 'and', '12', '11'], dtype='<U24')],
 true: 0, pred: 0
630:  strongly regular graph with parameters   MATH  exists if MATH  such that 
 : [array(['with parameters', 'with', 'that', 'such that', 'such',
       'strongly regular', 'strongly', 'regular graph', 'regular',
       'parameters math', 'parameters', 'math such', 'math exists',
       'math', 'if math', 'if', 'graph with', 'graph', 'exists'],
      dtype='<U24')],
 true: 1, pred: 1
632:  a choice we thus get   MATH   as desired. □
 : [array(['we', 'thus', 'math as', 'math', 'get math', 'get', 'desired',
       'choice', 'as'], dtype='<U24')],
 true: 0, pred: 0
633:  better theorem for  MATH  and   MATH  , proved in Reisman   [35, Lemma 
 : [array(['theorem', 'proved', 'math and', 'math', 'lemma', 'in', 'for math',
       'for', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
635:  of continuity of  MATH  and   MATH  MATH  We prove now that 
 : [array(['we', 'that', 'prove', 'of math', 'of continuity', 'of', 'now',
       'math we', 'math math', 'math and', 'math', 'continuity of',
       'continuity', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
637:  there exists  a unique solution  MATH   to the boundary value problem 
 : [array(['value problem', 'value', 'unique solution', 'unique', 'to the',
       'to', 'there exists', 'there', 'the boundary', 'the',
       'solution math', 'solution', 'problem', 'math to', 'math',
       'exists unique', 'exists', 'boundary value', 'boundary'],
      dtype='<U24')],
 true: 1, pred: 1
638: (2) If  MATH  , but MATH , MATH
 : [array(['math math', 'math but', 'math', 'if math', 'if', 'but math',
       'but'], dtype='<U24')],
 true: 0, pred: 0
639:  have  MATH  By observing that   MATH   and applying the previous with 
 : [array(['with', 'the previous', 'the', 'that math', 'that', 'previous',
       'observing that', 'observing', 'math by', 'math and', 'math',
       'have math', 'have', 'by', 'applying the', 'applying', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
640:  equation  (3.18) , it follows immediately  MATH 
 : [array(['math', 'it follows', 'it', 'immediately', 'follows', 'equation',
       '18'], dtype='<U24')],
 true: 0, pred: 0
641: Suppose that  MATH  satisfies condition (A.19) and  MATH 
 : [array(['that math', 'that', 'suppose that', 'suppose', 'satisfies',
       'math satisfies', 'math', 'condition', 'and math', 'and', '19'],
      dtype='<U24')],
 true: 0, pred: 0
643:  and a function  MATH , with   MATH   in  MATH  , where ∇ is 
 : [array(['with math', 'with', 'where is', 'where', 'math with',
       'math where', 'math in', 'math', 'is', 'in math', 'in',
       'function math', 'function', 'and'], dtype='<U24')],
 true: 0, pred: 0
644:  uniform estimates of  Z  for   MATH  . Therefore we only consider   MATH 
 : [array(['we only', 'we', 'uniform', 'therefore we', 'therefore', 'only',
       'of', 'math therefore', 'math', 'for math', 'for', 'estimates of',
       'estimates', 'consider math', 'consider'], dtype='<U24')],
 true: 0, pred: 0
645:  MATH  ,  MATH , there are exactly   MATH   vertices adjacent to both   MATH 
 : [array(['vertices', 'to', 'there are', 'there', 'math there', 'math math',
       'math', 'exactly', 'both math', 'both', 'are', 'adjacent'],
      dtype='<U24')],
 true: 1, pred: 1
646:  We have  MATH  where  MATH ,   MATH   which is exactly the outer 
 : [array(['which is', 'which', 'where math', 'where', 'we have', 'we', 'the',
       'math which', 'math where', 'math math', 'math', 'is', 'have math',
       'have', 'exactly'], dtype='<U24')],
 true: 0, pred: 0
647:  7.2   and the range of   MATH   that the boundary term in 
 : [array(['the boundary', 'the', 'that the', 'that', 'term', 'of math', 'of',
       'math that', 'math', 'in', 'boundary', 'and the', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
648:  and  (2.3c) , we can obtain  MATH   Since we consider the contact 
 : [array(['we consider', 'we can', 'we', 'the', 'since', 'obtain math',
       'obtain', 'math since', 'math', 'consider the', 'consider',
       'can obtain', 'can', 'and'], dtype='<U24')],
 true: 0, pred: 0
649:  the second term, we have   MATH   Hence, by using the above 
 : [array(['we have', 'we', 'using the', 'using', 'the second', 'the above',
       'the', 'term we', 'term', 'second term', 'second', 'math hence',
       'math', 'hence', 'have math', 'have', 'by using', 'by', 'above'],
      dtype='<U24')],
 true: 0, pred: 0
650:  MATH  MATH MATH MATH Therefore  MATH 
 : [array(['therefore math', 'therefore', 'math therefore', 'math math',
       'math'], dtype='<U24')],
 true: 0, pred: 0
652:  holds for local weak solutions   MATH   of  (4.21)  such that  MATH 
 : [array(['weak', 'that math', 'that', 'such that', 'such', 'solutions',
       'of', 'math of', 'math', 'local weak', 'local', 'holds', 'for',
       '21'], dtype='<U24')],
 true: 0, pred: 0
653:  be the greatest positive integer   MATH   for which  (4.7)  holds and 
 : [array(['which', 'the', 'positive integer', 'positive', 'math for', 'math',
       'integer math', 'integer', 'holds', 'for', 'be the', 'be', 'and'],
      dtype='<U24')],
 true: 1, pred: 1
654:  find a boundary condition for   MATH   such that with this boundary 
 : [array(['with', 'this', 'that', 'such that', 'such', 'math such', 'math',
       'for math', 'for', 'find', 'condition', 'boundary condition',
       'boundary'], dtype='<U24')],
 true: 0, pred: 0
655:  some real number  ϑ, is  MATH  then we have MATH  for 
 : [array(['we have', 'we', 'then we', 'then', 'some', 'real', 'number',
       'math then', 'math for', 'math', 'is math', 'is', 'have math',
       'have', 'for'], dtype='<U24')],
 true: 0, pred: 0
658:  of weight  MATH  for some   MATH   . We recall the linear relation 
 : [array(['weight math', 'weight', 'we recall', 'we', 'the linear', 'the',
       'some math', 'some', 'relation', 'recall the', 'recall',
       'of weight', 'of', 'math we', 'math for', 'math', 'linear',
       'for some', 'for'], dtype='<U24')],
 true: 0, pred: 0
659:  admissible domain. For any  MATH ,  MATH  , MATH  , the generalised Newton potential 
 : [array(['the', 'potential', 'newton potential', 'newton', 'math the',
       'math math', 'math', 'for any', 'for', 'domain for', 'domain',
       'any math', 'any', 'admissible domain', 'admissible'], dtype='<U24')],
 true: 0, pred: 0
661:  The boundary condition  (6.2)  on   MATH   remains unchanged: MATH  and condition 
 : [array(['the boundary', 'the', 'on math', 'on', 'math and', 'math',
       'condition', 'boundary condition', 'boundary', 'and'], dtype='<U24')],
 true: 0, pred: 0
662:  MATH   with  MATH  (hence, replacing   MATH   by  MATH  and  b  by 
 : [array(['with math', 'with', 'replacing', 'math with', 'math hence',
       'math by', 'math and', 'math', 'hence', 'by math', 'by', 'and by',
       'and'], dtype='<U24')],
 true: 0, pred: 0
664:  both  MATH  and  MATH  are   MATH   . So, the quantity at the 
 : [array(['the', 'so', 'quantity', 'math so', 'math are', 'math and', 'math',
       'both math', 'both', 'at the', 'at', 'are math', 'are', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
665:  3.1  ) the above expression is  MATH   That is, MATH  As we 
 : [array(['we', 'the above', 'the', 'that is', 'that', 'math that',
       'math as', 'math', 'is math', 'is', 'expression', 'as', 'above'],
      dtype='<U24')],
 true: 0, pred: 0
666:  the  q -series expansions of   MATH   and  MATH .
 : [array(['the', 'series', 'of math', 'of', 'math and', 'math', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
667:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
668:  by assumption, this shows that   MATH   is a Cauchy net in 
 : [array(['this', 'that math', 'that', 'shows that', 'shows', 'math is',
       'math', 'is', 'in', 'by', 'assumption'], dtype='<U24')],
 true: 0, pred: 0
669:  least in the asymptotical regime   MATH   . Indeed, we recall that for 
 : [array(['we recall', 'we', 'the', 'that for', 'that', 'recall that',
       'recall', 'math', 'least', 'indeed', 'in the', 'in', 'for'],
      dtype='<U24')],
 true: 0, pred: 0
670:  the value of  X  at   MATH   whereas  MATH  denotes the rescaling 
 : [array(['value of', 'value', 'the value', 'the rescaling', 'the',
       'rescaling', 'of at', 'of', 'math denotes', 'math', 'denotes the',
       'denotes', 'at math', 'at'], dtype='<U24')],
 true: 0, pred: 0
671:  of the stable subspace of   MATH   on Σ. The proof can 
 : [array(['the stable', 'the proof', 'the', 'subspace of', 'subspace',
       'stable subspace', 'stable', 'proof', 'on the', 'on', 'of the',
       'of math', 'of', 'math on', 'math', 'can'], dtype='<U24')],
 true: 0, pred: 0
673:  by  MATH  iff  MATH . Put   MATH  , where  MATH  and  MATH  for 
 : [array(['where math', 'where', 'put math', 'put', 'math where', 'math iff',
       'math for', 'math and', 'math', 'iff math', 'iff', 'for',
       'by math', 'by', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
674:  know that  MATH , and therefore   MATH   and  MATH  . We further claim 
 : [array(['we', 'therefore math', 'therefore', 'that math', 'that',
       'math we', 'math and', 'math', 'know that', 'know', 'further',
       'claim', 'and therefore', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
675:  is an admissible domain, and   MATH  , then MATH where ε  is 
 : [array(['where is', 'where', 'then math', 'then', 'math where',
       'math then', 'math', 'is an', 'is', 'domain and', 'domain',
       'and math', 'and', 'an admissible', 'an', 'admissible domain',
       'admissible'], dtype='<U24')],
 true: 0, pred: 0
678:  of  Lemma 3.3  and get  MATH   which shows that  MATH  . By 
 : [array(['which shows', 'which', 'that math', 'that', 'shows that', 'shows',
       'of', 'math which', 'math by', 'math', 'lemma', 'get math', 'get',
       'by', 'and'], dtype='<U24')],
 true: 0, pred: 0
680:  Let  MATH , MATH , MATH , and  MATH  . Let MATH and MATH  . Then 
 : [array(['then', 'math then', 'math math', 'math let', 'math and', 'math',
       'let math', 'let', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
681:  real and negative, which implies   MATH  . Hence  MATH  with  MATH  are 
 : [array(['with math', 'with', 'which implies', 'which', 'real and', 'real',
       'negative', 'math with', 'math hence', 'math are', 'math',
       'implies math', 'implies', 'hence math', 'hence', 'are',
       'and negative', 'and'], dtype='<U24')],
 true: 0, pred: 0
682:  the beginning of the proof   MATH   where  η  is as usual 
 : [array(['where is', 'where', 'usual', 'the proof', 'the', 'proof',
       'of the', 'of', 'math where', 'math', 'is as', 'is', 'as usual',
       'as'], dtype='<U24')],
 true: 0, pred: 0
684:  when  MATH  is invertible at   MATH  , and  MATH  corresponds to the 
 : [array(['when math', 'when', 'to the', 'to', 'the', 'math is', 'math and',
       'math', 'is invertible', 'is', 'invertible at', 'invertible',
       'corresponds to', 'corresponds', 'at math', 'at', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
685:  we can find  MATH  for   MATH   such that  MATH  on Σ. 
 : [array(['we can', 'we', 'that math', 'that', 'such that', 'such', 'on',
       'math such', 'math on', 'math for', 'math', 'for math', 'for',
       'find', 'can'], dtype='<U24')],
 true: 0, pred: 0
686:  holds  MATH for some constant  MATH  .
 : [array(['some', 'math for', 'math', 'holds math', 'holds', 'for some',
       'for', 'constant math', 'constant'], dtype='<U24')],
 true: 0, pred: 0
687:  is of Case  I. Then  MATH  and M  is Clifford torus 
 : [array(['torus', 'then math', 'then', 'of', 'math and', 'math', 'is of',
       'is clifford', 'is', 'clifford torus', 'clifford', 'case',
       'and is', 'and'], dtype='<U24')],
 true: 0, pred: 0
688:  only finitely many possibilities for   MATH   if  k  is given. □ 
 : [array(['only finitely', 'only', 'math if', 'math', 'many', 'is given',
       'is', 'if is', 'if', 'given', 'for math', 'for', 'finitely many',
       'finitely'], dtype='<U24')],
 true: 0, pred: 0
689:  into this equality, we get   MATH   Then applying  Lemma 3.4  and 
 : [array(['we get', 'we', 'this equality', 'this', 'then', 'math then',
       'math', 'lemma', 'into this', 'into', 'get math', 'get',
       'equality', 'applying', 'and'], dtype='<U24')],
 true: 0, pred: 0
690:  Let  MATH and MATH then  MATH 
 : [array(['then math', 'then', 'math then', 'math and', 'math', 'let math',
       'let', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
691:  shock solution represented by point   MATH  , and  MATH  when point   A 
 : [array(['when', 'solution represented', 'solution', 'shock solution',
       'shock', 'represented by', 'represented', 'point math', 'point',
       'math when', 'math and', 'math', 'by point', 'by', 'and math',
       'and'], dtype='<U24')],
 true: 1, pred: 1
692:  can extract a finite covering   MATH   of Σ to show that 
 : [array(['to show', 'to', 'that', 'show that', 'show', 'of', 'math of',
       'math', 'finite', 'can'], dtype='<U24')],
 true: 0, pred: 0
693:  the velocity is bounded. Then   MATH   should be bounded in   MATH 
 : [array(['velocity', 'then math', 'then', 'the velocity', 'the',
       'should be', 'should', 'math', 'is', 'in math', 'in', 'bounded in',
       'bounded', 'be bounded', 'be'], dtype='<U24')],
 true: 0, pred: 0
694:  natural numbers  MATH  the decomposition   MATH   is valid, and for every 
 : [array(['valid', 'the', 'numbers', 'natural', 'math the', 'math is',
       'math', 'is', 'for every', 'for', 'every', 'and for', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
695:  maps  MATH  to  MATH  if   MATH   and to ∞ if   MATH 
 : [array(['to math', 'to', 'math to', 'math if', 'math and', 'math',
       'if math', 'if', 'and'], dtype='<U24')],
 true: 0, pred: 0
698:  polar coordinates for  MATH , where  MATH 
 : [array(['where math', 'where', 'polar coordinates', 'polar', 'math where',
       'math', 'for math', 'for', 'coordinates for', 'coordinates'],
      dtype='<U24')],
 true: 0, pred: 0
699: (ii)  if  MATH  and MATH  is odd, then 
 : [array(['then', 'odd then', 'odd', 'math is', 'math and', 'math', 'is odd',
       'is', 'ii if', 'ii', 'if math', 'if', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
700:  Fourier transform with respect to   MATH   to problem  (A.9) –  (A.10) 
 : [array(['with respect', 'with', 'transform', 'to math', 'to', 'respect to',
       'respect', 'problem', 'math to', 'math', 'fourier transform',
       'fourier', '10'], dtype='<U24')],
 true: 0, pred: 0
701:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
702:  two-dimensional isentropic MHD (cf.  [56] ):  MATH   We linearize the system around 
 : [array(['we', 'two', 'the system', 'the', 'system', 'math we', 'math',
       'dimensional'], dtype='<U24')],
 true: 0, pred: 0
703:  By using  (3.27) , we conclude  MATH 
 : [array(['we conclude', 'we', 'using', 'math', 'conclude math', 'conclude',
       'by using', 'by'], dtype='<U24')],
 true: 0, pred: 0
704: We have  MATH 
 : [array(['we have', 'we', 'math', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
705:  be two positive integers with   MATH  and MATH . For each  MATH 
 : [array(['with math', 'with', 'two positive', 'two', 'positive integers',
       'positive', 'math for', 'math and', 'math', 'integers with',
       'integers', 'for each', 'for', 'each math', 'each', 'be two', 'be',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
708:  diffeomorphisms  MATH  converging uniformly to   MATH  . Then MATH  We are going 
 : [array(['we are', 'we', 'uniformly to', 'uniformly', 'to math', 'to',
       'then math', 'then', 'math we', 'math then', 'math', 'going',
       'diffeomorphisms math', 'diffeomorphisms', 'converging', 'are'],
      dtype='<U24')],
 true: 0, pred: 0
709:  a positive constant depending on   MATH  .
 : [array(['positive constant', 'positive', 'on math', 'on', 'math',
       'depending on', 'depending', 'constant'], dtype='<U24')],
 true: 0, pred: 0
710:  space of distributions and define   MATH   for  MATH  , equipped with the 
 : [array(['with the', 'with', 'the', 'space of', 'space', 'of', 'math for',
       'math', 'for math', 'for', 'define math', 'define', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
711: (3) If  MATH  , MATH
 : [array(['math math', 'math', 'if math', 'if'], dtype='<U24')],
 true: 0, pred: 0
712:  respect to  MATH , we have  MATH   that is, MATH  Thus, the 
 : [array(['we have', 'we', 'to math', 'to', 'thus the', 'thus', 'the',
       'that is', 'that', 'respect to', 'respect', 'math we', 'math thus',
       'math that', 'math', 'is math', 'is', 'have math', 'have'],
      dtype='<U24')],
 true: 0, pred: 0
714: MATH MATH MATH MATH  MATH  MATH MATH MATH
 : [array(['math math', 'math'], dtype='<U24')],
 true: 0, pred: 0
715:  r   is the step of   MATH   and  MATH ,  MATH  . For any 
 : [array(['the', 'step of', 'step', 'of math', 'of', 'math math', 'math for',
       'math and', 'math', 'is the', 'is', 'for any', 'for', 'any',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
716:  where  MATH  with  MATH , and  MATH 
 : [array(['with math', 'with', 'where math', 'where', 'math with',
       'math and', 'math', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
717:  an admissible domain Ω in   MATH  ,  dν  the volume element on 
 : [array(['the', 'on', 'math', 'in math', 'in', 'element', 'domain',
       'an admissible', 'an', 'admissible domain', 'admissible'],
      dtype='<U24')],
 true: 0, pred: 0
718:  sequence of non-decreasing natural numbers   MATH   and a sequence of real 
 : [array(['sequence of', 'sequence', 'real', 'of', 'numbers', 'non',
       'natural', 'math and', 'math', 'decreasing', 'and'], dtype='<U24')],
 true: 1, pred: 1
719:  the shock polar, we have   MATH   Then any  MATH  and   MATH 
 : [array(['we have', 'we', 'then', 'the shock', 'the', 'shock polar',
       'shock', 'polar', 'math then', 'math and', 'math', 'have math',
       'have', 'any math', 'any', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
720:  MATH   is continuous. Suppose that   MATH   for every  MATH  . Then for 
 : [array(['then for', 'then', 'that math', 'that', 'suppose that', 'suppose',
       'math then', 'math is', 'math for', 'math', 'is continuous', 'is',
       'for every', 'for', 'every math', 'every', 'continuous'],
      dtype='<U24')],
 true: 0, pred: 0
721:  of Σ and continuity of   MATH   and  MATH  , we know that 
 : [array(['we know', 'we', 'that', 'of math', 'of and', 'of', 'math we',
       'math and', 'math', 'know that', 'know', 'continuity of',
       'continuity', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
722:  MATH  . Since  MATH  is primitive,   MATH   and since  MATH  is of 
 : [array(['since math', 'since', 'of', 'math since', 'math is', 'math and',
       'math', 'is of', 'is', 'and since', 'and'], dtype='<U24')],
 true: 0, pred: 0
723:  elements  MATH  and  MATH  in   MATH   . We define the following linear 
 : [array(['we define', 'we', 'the following', 'the', 'math we', 'math in',
       'math and', 'math', 'linear', 'in math', 'in', 'following linear',
       'following', 'elements math', 'elements', 'define the', 'define',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
726:  column of  MATH ), for all   MATH  . Hence from  (4.10) , via   Lemma 
 : [array(['via', 'of math', 'of', 'math hence', 'math for', 'math', 'lemma',
       'hence from', 'hence', 'from', 'for all', 'for', 'column of',
       'column', 'all math', 'all', '10'], dtype='<U24')],
 true: 0, pred: 0
727:  where we further used that   MATH   . The left-hand side is estimated 
 : [array(['where we', 'where', 'we', 'used that', 'used', 'the', 'that math',
       'that', 'side', 'math the', 'math', 'left', 'is', 'hand side',
       'hand', 'further', 'estimated'], dtype='<U24')],
 true: 0, pred: 0
729:  Then  MATH , but  MATH  and   MATH  . Now, we have MATH  By 
 : [array(['we have', 'we', 'then math', 'then', 'now we', 'now', 'math now',
       'math by', 'math but', 'math and', 'math', 'have math', 'have',
       'by', 'but math', 'but', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
730:  MATH  , MATH , and MATH . Let  MATH   . Then the following generalised local 
 : [array(['then the', 'then', 'the following', 'the', 'math then',
       'math math', 'math let', 'math and', 'math', 'local', 'let math',
       'let', 'following', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
732:  boundary  MATH , where MATH  and  MATH   Moreover, from  (2.5)  , we obtain 
 : [array(['where math', 'where', 'we obtain', 'we', 'obtain', 'moreover',
       'math where', 'math moreover', 'math and', 'math', 'from we',
       'from', 'boundary math', 'boundary', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
733:  that  MATH  for  MATH . Then  MATH   for every  MATH  , i.e. the 
 : [array(['then math', 'then', 'the', 'that math', 'that', 'math then',
       'math the', 'math for', 'math', 'for math', 'for every', 'for',
       'every math', 'every'], dtype='<U24')],
 true: 0, pred: 0
734:  Let  MATH  be such that   MATH   and  MATH  for all   b 
 : [array(['that math', 'that', 'such that', 'such', 'math for', 'math be',
       'math and', 'math', 'let math', 'let', 'for all', 'for', 'be such',
       'be', 'and math', 'and', 'all'], dtype='<U24')],
 true: 0, pred: 0
735:  MATH  . Otherwise,  MATH ,  MATH . Since   MATH   is irreducible, we still have 
 : [array(['we still', 'we', 'still', 'since math', 'since', 'otherwise',
       'math since', 'math otherwise', 'math math', 'math is', 'math',
       'is', 'irreducible', 'have'], dtype='<U24')],
 true: 0, pred: 0
736:  equation  (3.13) , we can get  MATH   Hence either  MATH  or   MATH 
 : [array(['we can', 'we', 'or math', 'or', 'math or', 'math hence', 'math',
       'hence', 'get math', 'get', 'equation 13', 'equation',
       'either math', 'either', 'can get', 'can', '13'], dtype='<U24')],
 true: 0, pred: 0
737:  Let  MATH , where  MATH  and   MATH   for every pair of distinct 
 : [array(['where math', 'where', 'pair of', 'pair', 'of distinct', 'of',
       'math where', 'math for', 'math and', 'math', 'let math', 'let',
       'for every', 'for', 'every pair', 'every', 'distinct', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
738:  than  MATH  as  MATH , while   MATH   decays slower than  MATH  in 
 : [array(['while', 'than math', 'than', 'slower than', 'slower',
       'math while', 'math in', 'math as', 'math', 'in', 'decays slower',
       'decays', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
740:  find that there exists a   MATH  , such that  MATH  . The claim 
 : [array(['there exists', 'there', 'the claim', 'the', 'that math', 'that',
       'such that', 'such', 'math the', 'math such', 'math', 'find',
       'exists math', 'exists', 'claim'], dtype='<U24')],
 true: 0, pred: 0
741:  f   supported in Ω. Here   MATH   is the fundamental solution to 
 : [array(['to', 'the fundamental', 'the', 'supported', 'solution to',
       'solution', 'math is', 'math', 'is the', 'is', 'in', 'here math',
       'here', 'fundamental solution', 'fundamental'], dtype='<U24')],
 true: 0, pred: 0
742:  for  MATH  as MATH  where  MATH 
 : [array(['where math', 'where', 'math where', 'math as', 'math', 'for math',
       'for', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
743:  that for a prime power   MATH  , the matrix  MATH  is invertible 
 : [array(['the matrix', 'the', 'that for', 'that', 'prime power', 'prime',
       'power math', 'power', 'matrix math', 'matrix', 'math the',
       'math is', 'math', 'is invertible', 'is', 'invertible', 'for'],
      dtype='<U24')],
 true: 1, pred: 1
744:  can be applicable weights. Since   MATH  , the regularity of velocity   Du 
 : [array(['weights', 'velocity', 'the regularity', 'the', 'since math',
       'since', 'regularity of', 'regularity', 'of', 'math the', 'math',
       'du', 'can be', 'can', 'be', 'applicable'], dtype='<U24')],
 true: 0, pred: 0
745:  writing  MATH  means that both   MATH   and  E  are open sets 
 : [array(['that', 'sets', 'open', 'means that', 'means', 'math and', 'math',
       'both math', 'both', 'are', 'and are', 'and'], dtype='<U24')],
 true: 1, pred: 1
746:  whose level divides  N . For   MATH  , let  MATH  (resp.  MATH  ) be 
 : [array(['resp', 'math resp', 'math let', 'math be', 'math', 'level',
       'let math', 'let', 'for math', 'for', 'divides', 'be'],
      dtype='<U24')],
 true: 0, pred: 0
749:  MATH   if and only if   MATH  . For  MATH  and for   MATH 
 : [array(['only if', 'only', 'math if', 'math for', 'math and', 'math',
       'if math', 'if and', 'if', 'for math', 'for', 'and only',
       'and for', 'and'], dtype='<U24')],
 true: 0, pred: 0
750:  is the complex conjugate of   MATH  . Then  MATH  , which implies that 
 : [array(['which implies', 'which', 'then math', 'then', 'the complex',
       'the', 'that', 'of math', 'of', 'math which', 'math then', 'math',
       'is the', 'is', 'implies that', 'implies', 'complex'], dtype='<U24')],
 true: 0, pred: 0
751:  MATH   is a basis of   MATH   over  MATH ,  MATH  is equivalent 
 : [array(['over math', 'over', 'of math', 'of', 'math over', 'math math',
       'math is', 'math', 'is equivalent', 'is basis', 'is', 'equivalent',
       'basis of', 'basis'], dtype='<U24')],
 true: 0, pred: 0
752:  ease of notation, we write   MATH  ,  MATH  and  MATH . Since   MATH 
 : [array(['write math', 'write', 'we write', 'we', 'since math', 'since',
       'of', 'notation', 'math since', 'math math', 'math and', 'math',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
753:  a  product of sphere, or  MATH  Cartan's minimal hypersurface.
 : [array(['sphere', 'product of', 'product', 'or math', 'or', 'of sphere',
       'of', 'minimal hypersurface', 'minimal', 'math', 'hypersurface',
       'cartan minimal', 'cartan'], dtype='<U24')],
 true: 0, pred: 0
754:  is the unique solution in   MATH  of the equation MATH  with 
 : [array(['with', 'unique solution', 'unique', 'the unique', 'the equation',
       'the', 'solution in', 'solution', 'of the', 'of', 'math with',
       'math of', 'math', 'is the', 'is', 'in math', 'in',
       'equation math', 'equation'], dtype='<U24')],
 true: 0, pred: 0
755:  is even, then we have   MATH  where  MATH  . By the fact 
 : [array(['where math', 'where', 'we have', 'we', 'then we', 'then',
       'the fact', 'the', 'math where', 'math by', 'math', 'is even',
       'is', 'have math', 'have', 'fact', 'even then', 'even', 'by the',
       'by'], dtype='<U24')],
 true: 0, pred: 0
756:  Similarly we can show that   MATH   in Σ. Hence again we 
 : [array(['we can', 'we', 'that math', 'that', 'similarly we', 'similarly',
       'show that', 'show', 'math in', 'math', 'in', 'hence', 'can',
       'again we', 'again'], dtype='<U24')],
 true: 0, pred: 0
757:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
758:  has the unique trivial solution   MATH   in the class of functions 
 : [array(['unique trivial', 'unique', 'trivial solution', 'trivial',
       'the unique', 'the class', 'the', 'solution math', 'solution',
       'of functions', 'of', 'math in', 'math', 'in the', 'in', 'has the',
       'has', 'functions', 'class of', 'class'], dtype='<U24')],
 true: 1, pred: 1
759:  MATH  then the mapping  MATH  is a diffeomorphism of  U 
 : [array(['then the', 'then', 'the mapping', 'the', 'of', 'math then',
       'math is', 'math', 'mapping math', 'mapping', 'is diffeomorphism',
       'is', 'diffeomorphism of', 'diffeomorphism'], dtype='<U24')],
 true: 1, pred: 1
760:  given  K  and sufficiently small   MATH  .
 : [array(['sufficiently small', 'sufficiently', 'small', 'math', 'given',
       'and'], dtype='<U24')],
 true: 0, pred: 0
761:  is a positive integer. Let   MATH   be a basis of   MATH 
 : [array(['positive integer', 'positive', 'of math', 'of', 'math be', 'math',
       'let math', 'let', 'is positive', 'is', 'integer', 'be basis',
       'be', 'basis of', 'basis'], dtype='<U24')],
 true: 1, pred: 1
762:  For all  MATH , we set   MATH   and we set  MATH  . For 
 : [array(['we set', 'we', 'set math', 'set', 'math we', 'math for',
       'math and', 'math', 'for all', 'for', 'and we', 'and', 'all math',
       'all'], dtype='<U24')],
 true: 0, pred: 0
763:  factorizable on  MATH  (resp. on   MATH   for all multiples  M  of 
 : [array(['resp', 'on math', 'on', 'of', 'math resp', 'math for', 'math',
       'for all', 'for', 'all'], dtype='<U24')],
 true: 0, pred: 0
764:  an open neighborhood  MATH  of   MATH   such that  MATH  can be 
 : [array(['that math', 'that', 'such that', 'such', 'open neighborhood',
       'open', 'of math', 'of', 'neighborhood math', 'neighborhood',
       'math such', 'math of', 'math can', 'math', 'can be', 'can', 'be',
       'an open', 'an'], dtype='<U24')],
 true: 0, pred: 0
765:  (5.5)   and  (5.6) , we have  MATH   This implies MATH  Since in 
 : [array(['we have', 'we', 'this implies', 'this', 'since', 'math this',
       'math since', 'math', 'in', 'implies math', 'implies', 'have math',
       'have', 'and we', 'and'], dtype='<U24')],
 true: 0, pred: 0
766:  since  MATH  is of level   MATH  ,  MATH . Let  MATH  and   MATH 
 : [array(['since math', 'since', 'of level', 'of', 'math math', 'math let',
       'math is', 'math and', 'math', 'level math', 'level', 'let math',
       'let', 'is of', 'is', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
767:  defined in  (1.9)  replaced by  MATH   and  L  is as above. 
 : [array(['math and', 'math', 'is as', 'is', 'in', 'defined in', 'defined',
       'by math', 'by', 'as above', 'as', 'and is', 'and', 'above'],
      dtype='<U24')],
 true: 0, pred: 0
768:  und nichtverschwindende ganze modul-formen für   MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
769:  over  MATH . Then two bases   MATH   and  MATH  are said to 
 : [array(['two', 'to', 'then', 'said to', 'said', 'over math', 'over',
       'math then', 'math are', 'math and', 'math', 'bases', 'are',
       'and math', 'and'], dtype='<U24')],
 true: 1, pred: 1
770:  η   leads to a solution   MATH   of problem  (4.2) –  (4.3) 
 : [array(['to', 'solution math', 'solution', 'problem', 'of problem', 'of',
       'math of', 'math', 'leads'], dtype='<U24')],
 true: 0, pred: 0
771: (i) if   MATH  , then we have   MATH 
 : [array(['we have', 'we', 'then we', 'then', 'math then', 'math', 'if math',
       'if', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
772:  two distinct principal curvatures, then   MATH  and M  is Clifford torus 
 : [array(['two distinct', 'two', 'torus', 'then math', 'then', 'math and',
       'math', 'is clifford', 'is', 'distinct', 'curvatures',
       'clifford torus', 'clifford', 'and is', 'and'], dtype='<U24')],
 true: 0, pred: 0
773:  with balls  MATH , this gives  MATH   By combining  (4.19)  and   (4.18) 
 : [array(['with balls', 'with', 'this gives', 'this', 'math this', 'math by',
       'math', 'gives math', 'gives', 'combining', 'by', 'balls math',
       'balls', 'and', '19', '18'], dtype='<U24')],
 true: 0, pred: 0
774:  from  (4.8)  the signs of   MATH   are opposite to those of 
 : [array(['to', 'those', 'the', 'signs', 'opposite to', 'opposite',
       'of math', 'of', 'math are', 'math', 'from the', 'from', 'are'],
      dtype='<U24')],
 true: 0, pred: 0
775:  rectilinear vortex sheets:  MATH  where   MATH   and  ρ  are real numbers. 
 : [array(['where math', 'where', 'vortex', 'sheets', 'real', 'numbers',
       'math where', 'math and', 'math', 'are', 'and are', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
776:  positive constant  MATH  such that  MATH   for all  MATH .
 : [array(['that math', 'that', 'such that', 'such', 'positive constant',
       'positive', 'math such', 'math for', 'math', 'for all', 'for',
       'constant math', 'constant', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
777:  recalling that  MATH  and that  MATH   which follows from the hypothesis 
 : [array(['which', 'the', 'that math', 'that', 'recalling that', 'recalling',
       'math which', 'math and', 'math', 'hypothesis', 'from the', 'from',
       'follows from', 'follows', 'and that', 'and'], dtype='<U24')],
 true: 0, pred: 0
780:  Then condition  (6.11)  yields that  MATH   We remark that Ψ equals 
 : [array(['yields that', 'yields', 'we', 'then', 'that math', 'that',
       'math we', 'math', 'condition', '11'], dtype='<U24')],
 true: 0, pred: 0
781:  of (local) uncertainty principles on   MATH  .
 : [array(['on math', 'on', 'of', 'math', 'local'], dtype='<U24')],
 true: 0, pred: 0
782:  norms in the angular domain   MATH  , with  MATH .
 : [array(['with math', 'with', 'the angular', 'the', 'norms', 'math with',
       'math', 'in the', 'in', 'domain math', 'domain', 'angular domain',
       'angular'], dtype='<U24')],
 true: 1, pred: 1
783:  with constant scalar curvature in   MATH   are isoparametric
 : [array(['with constant', 'with', 'scalar curvature', 'scalar', 'math are',
       'math', 'isoparametric', 'in math', 'in', 'curvature',
       'constant scalar', 'constant', 'are'], dtype='<U24')],
 true: 0, pred: 0
784:  MATH  . Therefore if necessary, replacing   MATH   by  MATH  where  MATH  for 
 : [array(['where math', 'where', 'therefore', 'replacing',
       'necessary replacing', 'necessary', 'math where', 'math therefore',
       'math for', 'math by', 'math', 'if necessary', 'if', 'for',
       'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
785:  Lemma 4.1]  , if  MATH  with   MATH  , the eigenvalues  MATH  and   MATH 
 : [array(['with math', 'with', 'the eigenvalues', 'the', 'math with',
       'math the', 'math and', 'math', 'lemma', 'if math', 'if',
       'eigenvalues math', 'eigenvalues', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
786:  If  MATH , we obtain that   MATH   are both real and negative, 
 : [array(['we obtain', 'we', 'that math', 'that', 'real and', 'real',
       'obtain that', 'obtain', 'negative', 'math we', 'math are', 'math',
       'if math', 'if', 'both real', 'both', 'are both', 'are',
       'and negative', 'and'], dtype='<U24')],
 true: 0, pred: 0
787:  of the equation  (6.6) , i.e.,  MATH   From the previous relations, we 
 : [array(['we', 'the previous', 'the equation', 'the', 'relations',
       'previous', 'of the', 'of', 'math from', 'math', 'from the',
       'from', 'equation math', 'equation'], dtype='<U24')],
 true: 0, pred: 0
788:  we get  MATH  for some   MATH  . Thus, from  (3.7)  by observing 
 : [array(['we get', 'we', 'thus from', 'thus', 'some math', 'some',
       'observing', 'math thus', 'math for', 'math', 'get math', 'get',
       'from', 'for some', 'for', 'by'], dtype='<U24')],
 true: 0, pred: 0
790:  In what follows, the writing   MATH   means that both  F  and 
 : [array(['the', 'that', 'means that', 'means', 'math', 'in', 'follows',
       'both', 'and'], dtype='<U24')],
 true: 0, pred: 0
792:  and  MATH , we can obtain  MATH   □
 : [array(['we can', 'we', 'obtain math', 'obtain', 'math we', 'math',
       'can obtain', 'can', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
793:  same as  Theorem 3 . Let  MATH  Then there exists a  strongly 
 : [array(['there exists', 'there', 'theorem', 'then there', 'then',
       'strongly', 'same as', 'same', 'math then', 'math', 'let math',
       'let', 'exists', 'as'], dtype='<U24')],
 true: 0, pred: 0
794:  MATH  . Since  MATH , we have   MATH  , which implies that  MATH  and 
 : [array(['which implies', 'which', 'we have', 'we', 'that math', 'that',
       'since math', 'since', 'math which', 'math we', 'math since',
       'math and', 'math', 'implies that', 'implies', 'have math', 'have',
       'and'], dtype='<U24')],
 true: 0, pred: 0
795:  (3.2)  , if for any given   MATH   the existence of a simple 
 : [array(['the', 'simple', 'of', 'math the', 'math', 'if', 'given math',
       'given', 'for any', 'for', 'any'], dtype='<U24')],
 true: 0, pred: 0
796:  constant, then  MATH , for any   MATH   . The lemma holds immediately by 
 : [array(['then math', 'then', 'the lemma', 'the', 'math the', 'math for',
       'math', 'lemma', 'immediately', 'holds', 'for any', 'for',
       'constant', 'by', 'any math', 'any'], dtype='<U24')],
 true: 0, pred: 0
797:  As a result  MATH  Since   MATH  , then  MATH . Hence  MATH .
 : [array(['then math', 'then', 'since math', 'since', 'result', 'math then',
       'math since', 'math hence', 'math', 'hence math', 'hence', 'as'],
      dtype='<U24')],
 true: 0, pred: 0
798: If   MATH  , we obtain  MATH  . In this 
 : [array(['we obtain', 'we', 'this', 'obtain math', 'obtain', 'math we',
       'math in', 'math', 'in this', 'in', 'if math', 'if'], dtype='<U24')],
 true: 0, pred: 0
799: Case 5. If  MATH   , then all roots are on 
 : [array(['then all', 'then', 'roots are', 'roots', 'on', 'math then',
       'math', 'if math', 'if', 'case', 'are', 'all'], dtype='<U24')],
 true: 0, pred: 0
800:  MATH   and  MATH . Suppose  MATH ,   MATH   , then by direct calculation and 
 : [array(['then by', 'then', 'suppose math', 'suppose', 'math then',
       'math suppose', 'math math', 'math and', 'math', 'direct',
       'by direct', 'by', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
801:  where  MATH  with  MATH . Let  MATH   Then the Rankine–Hugoniot conditions on 
 : [array(['with math', 'with', 'where math', 'where', 'then the', 'then',
       'the rankine', 'the', 'rankine hugoniot', 'rankine', 'on',
       'math with', 'math then', 'math let', 'math', 'let math', 'let',
       'hugoniot', 'conditions'], dtype='<U24')],
 true: 0, pred: 0
802:  MATH   with the weight enumerator   MATH  .
 : [array(['with the', 'with', 'weight enumerator', 'weight', 'the weight',
       'the', 'math with', 'math', 'enumerator math', 'enumerator'],
      dtype='<U24')],
 true: 0, pred: 0
803:  possibly with a different constant   MATH  . Finally, we use again   (3.25) 
 : [array(['with', 'we use', 'we', 'use', 'math finally', 'math', 'finally',
       'different', 'constant math', 'constant', 'again', '25'],
      dtype='<U24')],
 true: 0, pred: 0
804:  each  MATH , let MATH Then  MATH  where MATH .
 : [array(['where math', 'where', 'then math', 'then', 'math where',
       'math then', 'math let', 'math', 'let math', 'let', 'each math',
       'each'], dtype='<U24')],
 true: 0, pred: 0
805:  product, we write  MATH  and  MATH   where  v  is a vector, 
 : [array(['write math', 'write', 'where is', 'where', 'we write', 'we',
       'vector', 'product', 'math where', 'math and', 'math', 'is',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
806:  for every  MATH we have  MATH   In particular, we also get 
 : [array(['we have', 'we also', 'we', 'particular', 'math we', 'math in',
       'math', 'in particular', 'in', 'have math', 'have', 'get',
       'for every', 'for', 'every math', 'every', 'also'], dtype='<U24')],
 true: 0, pred: 0
807:  to  (4.11)  also implies that   MATH  . So, we obtain MATH  where 
 : [array(['where', 'we obtain', 'we', 'to', 'that math', 'that', 'so we',
       'so', 'obtain math', 'obtain', 'math where', 'math so', 'math',
       'implies that', 'implies', 'also', '11'], dtype='<U24')],
 true: 0, pred: 0
808: Assume for simplicity that   MATH   . The general case follows by 
 : [array(['the', 'that math', 'that', 'simplicity', 'math the', 'math',
       'general', 'for simplicity', 'for', 'follows', 'case', 'by',
       'assume'], dtype='<U24')],
 true: 0, pred: 0
809:  to  MATH  Thus, we have  MATH   □
 : [array(['we have', 'we', 'to math', 'to', 'thus we', 'thus', 'math thus',
       'math', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
810:  which  (4.5)  holds and let  MATH   Let  M  be a positive 
 : [array(['which', 'positive', 'math let', 'math', 'let math', 'let be',
       'let', 'holds', 'be positive', 'be', 'and let', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
811:  condition  (6.3)  on  MATH  is  MATH   where  MATH  , the unit outer 
 : [array(['where math', 'where', 'unit', 'the unit', 'the', 'on math', 'on',
       'math where', 'math the', 'math is', 'math', 'is math', 'is',
       'condition'], dtype='<U24')],
 true: 0, pred: 0
812:  a direct computation, we have   MATH   and  MATH . Now, by   (4.5) 
 : [array(['we have', 'we', 'now', 'math now', 'math and', 'math',
       'have math', 'have', 'direct computation', 'direct',
       'computation we', 'computation', 'by', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
813: (5) If  MATH  ,
 : [array(['math', 'if math', 'if'], dtype='<U24')],
 true: 0, pred: 0
814:  operator  MATH  in  K , with   MATH  : MATH  MATH 
 : [array(['with math', 'with', 'operator math', 'operator', 'math math',
       'math in', 'math', 'in'], dtype='<U24')],
 true: 0, pred: 0
815:  non-negative bounded function that is,   MATH  and MATH  . Then the Dirichlet 
 : [array(['then the', 'then', 'the', 'that is', 'that', 'non', 'negative',
       'math then', 'math and', 'math', 'is math', 'is', 'function',
       'bounded function', 'bounded', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
816:  conditions hold:  MATH  MATH   where MATH
 : [array(['where math', 'where', 'math where', 'math math', 'math', 'hold',
       'conditions'], dtype='<U24')],
 true: 0, pred: 0
817:  in the class of functions   MATH  .
 : [array(['the class', 'the', 'of functions', 'of', 'math', 'in the', 'in',
       'functions math', 'functions', 'class of', 'class'], dtype='<U24')],
 true: 1, pred: 1
818:  This contradicts the fact that   MATH  .
 : [array(['this', 'the fact', 'the', 'that math', 'that', 'math',
       'fact that', 'fact', 'contradicts the', 'contradicts'],
      dtype='<U24')],
 true: 0, pred: 0
819:  with  MATH and let MATH ,  MATH  , and MATH . Let MATH  . Then 
 : [array(['with math', 'with', 'then', 'math then', 'math math', 'math let',
       'math and', 'math', 'let math', 'let', 'and math', 'and let',
       'and'], dtype='<U24')],
 true: 0, pred: 0
820:  contradicts the claim. This implies   MATH  . Therefore  Theorem 3.1  has been 
 : [array(['this implies', 'this', 'therefore', 'theorem', 'the claim', 'the',
       'math therefore', 'math', 'implies math', 'implies', 'has been',
       'has', 'contradicts the', 'contradicts', 'claim', 'been'],
      dtype='<U24')],
 true: 0, pred: 0
821:  first formula: if  MATH  and   MATH  , then MATH  where MATH  see 
 : [array(['where math', 'where', 'then math', 'then', 'see', 'math where',
       'math then', 'math see', 'math and', 'math', 'if math', 'if',
       'formula', 'first', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
822:  transform to obtain a solution   MATH   to problem  (A.9) –  (A.10) 
 : [array(['transform', 'to obtain', 'to', 'solution math', 'solution',
       'problem', 'obtain', 'math to', 'math', '10'], dtype='<U24')],
 true: 0, pred: 0
825: Let  MATH  and MATH . Let MATH  be 
 : [array(['math let', 'math be', 'math and', 'math', 'let math', 'let', 'be',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
826:  notation, we write  MATH  and   MATH  . From  Lemma 2  , we have 
 : [array(['write math', 'write', 'we write', 'we have', 'we', 'notation',
       'math from', 'math and', 'math', 'lemma we', 'lemma', 'have',
       'from lemma', 'from', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
827:  have  MATH  for  MATH , and  MATH   for  MATH . Here MATH  We 
 : [array(['we', 'math we', 'math here', 'math for', 'math and', 'math',
       'here math', 'here', 'have math', 'have', 'for math', 'for',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
828: Define MATH  where   MATH   and  MATH  . Note that, by 
 : [array(['where math', 'where', 'that by', 'that', 'note that', 'note',
       'math where', 'math note', 'math and', 'math', 'define math',
       'define', 'by', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
829:  the above equalities, we get   MATH   Combining  Lemma 3.4 ,  (3.36)  and 
 : [array(['we get', 'we', 'the above', 'the', 'math combining', 'math',
       'lemma', 'get math', 'get', 'equalities we', 'equalities',
       'combining', 'and', 'above equalities', 'above'], dtype='<U24')],
 true: 0, pred: 0
831:  can be extended to operators   MATH   where  MATH  is a positive-definite 
 : [array(['where math', 'where', 'to', 'positive definite', 'positive',
       'operators', 'math where', 'math is', 'math', 'is positive', 'is',
       'definite', 'can be', 'can', 'be'], dtype='<U24')],
 true: 0, pred: 0
832:  positive integers with  MATH and  MATH  . Assume that MATH is  a 
 : [array(['with math', 'with', 'that math', 'that', 'positive integers',
       'positive', 'math is', 'math assume', 'math and', 'math', 'is',
       'integers with', 'integers', 'assume that', 'assume', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
833:  Lemma 3.9  , we can obtain  MATH  Lemma 3.4  alone tells us 
 : [array(['we can', 'we', 'us', 'obtain math', 'obtain', 'math', 'lemma we',
       'lemma', 'can obtain', 'can'], dtype='<U24')],
 true: 0, pred: 0
834:  gradient with respect to the   MATH   variable. In order to estimate 
 : [array(['with respect', 'with', 'to the', 'to', 'the math', 'the',
       'respect to', 'respect', 'order to', 'order', 'math', 'in order',
       'in', 'gradient', 'estimate'], dtype='<U24')],
 true: 0, pred: 0
835:  over  MATH  is defined by   MATH   In this paper, denote the 
 : [array(['this paper', 'this', 'the', 'paper', 'over math', 'over',
       'math is', 'math in', 'math', 'is defined', 'is', 'in this', 'in',
       'denote the', 'denote', 'defined by', 'defined', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
836:  By the definition of  MATH ,   MATH   and  MATH  , we know that 
 : [array(['we know', 'we', 'the definition', 'the', 'that', 'of math', 'of',
       'math we', 'math math', 'math and', 'math', 'know that', 'know',
       'definition of', 'definition', 'by the', 'by', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
838:  for  MATH , MATH  and for   MATH  , MATH  That is, we obtain 
 : [array(['we obtain', 'we', 'that is', 'that', 'obtain', 'math that',
       'math math', 'math and', 'math', 'is we', 'is', 'for math', 'for',
       'and for', 'and'], dtype='<U24')],
 true: 0, pred: 0
839:  of it with indices in   MATH  . For  MATH  and  MATH  , by 
 : [array(['with', 'of', 'math for', 'math by', 'math and', 'math', 'it',
       'in math', 'in', 'for math', 'for', 'by', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
840:  MATH 
 : [array(['math'], dtype='<U24')],
 true: 0, pred: 0
841:  equation  (3.10) , we get that   MATH  , for any directions  MATH  and 
 : [array(['we get', 'we', 'that math', 'that', 'math for', 'math and',
       'math', 'get that', 'get', 'for any', 'for', 'equation',
       'directions math', 'directions', 'any directions', 'any', 'and',
       '10 we', '10'], dtype='<U24')],
 true: 0, pred: 0
842: Case 1. If  MATH   , then all the roots are 
 : [array(['then all', 'then', 'the roots', 'the', 'roots are', 'roots',
       'math then', 'math', 'if math', 'if', 'case', 'are', 'all the',
       'all'], dtype='<U24')],
 true: 0, pred: 0
844:  MATH   into  (3.39) , we get  MATH   Again, the first term vanishes 
 : [array(['we get', 'we', 'vanishes', 'the first', 'the', 'term',
       'math into', 'math', 'into 39', 'into', 'get math', 'get',
       'first term', 'first', 'again', '39 we', '39'], dtype='<U24')],
 true: 0, pred: 0
845:  there is  a positive constant  MATH  such that for all  MATH 
 : [array(['there is', 'there', 'that for', 'that', 'such that', 'such',
       'positive constant', 'positive', 'math such', 'math',
       'is positive', 'is', 'for all', 'for', 'constant math', 'constant',
       'all math', 'all'], dtype='<U24')],
 true: 1, pred: 1
846:  denoted by  MATH  such that  MATH   Thus  MATH  is continuous. Suppose 
 : [array(['thus math', 'thus', 'that math', 'that', 'suppose', 'such that',
       'such', 'math thus', 'math such', 'math is', 'math',
       'is continuous', 'is', 'denoted', 'continuous', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
847:  MATH  MATH  where   MATH  .
 : [array(['where math', 'where', 'math where', 'math math', 'math'],
      dtype='<U24')],
 true: 0, pred: 0
848:  we can forget the factor   MATH   in  (3.19)  . Then we use 
 : [array(['we use', 'we can', 'we', 'use', 'then we', 'then', 'the',
       'math in', 'math', 'in', 'factor', 'can', '19'], dtype='<U24')],
 true: 0, pred: 0
849: Moreover, for the case   MATH  , Peng–Terng  [13]  proved the following 
 : [array(['the following', 'the case', 'the', 'proved', 'moreover', 'math',
       'for the', 'for', 'following', 'case math', 'case', '13'],
      dtype='<U24')],
 true: 0, pred: 0
851:  a.e.  τ MATH  and therefore  MATH   Along with the function   K 
 : [array(['with the', 'with', 'therefore math', 'therefore', 'the function',
       'the', 'math and', 'math along', 'math', 'function',
       'and therefore', 'and', 'along'], dtype='<U24')],
 true: 0, pred: 0
853:  MATH  , where  d  is the   MATH  -gauge distance and MATH  If 
 : [array(['where is', 'where', 'the math', 'the', 'math where', 'math if',
       'math gauge', 'math', 'is the', 'is', 'if', 'gauge', 'distance',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
855:  Thus, we have  MATH  if   MATH  . □
 : [array(['we have', 'we', 'thus we', 'thus', 'math if', 'math', 'if math',
       'if', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
856:  that all the eigenvalues of   MATH   have positive real parts (in 
 : [array(['the eigenvalues', 'the', 'that', 'real', 'positive', 'parts',
       'of math', 'of', 'math have', 'math', 'in', 'have', 'eigenvalues',
       'all the', 'all'], dtype='<U24')],
 true: 0, pred: 0
857:  one has that  MATH  for   MATH   . Therefore to obtain the full 
 : [array(['to obtain', 'to', 'therefore', 'the', 'that math', 'that', 'one',
       'obtain the', 'obtain', 'math therefore', 'math for', 'math',
       'has', 'for math', 'for'], dtype='<U24')],
 true: 0, pred: 0
858:  call  N  the  level  of   MATH  . Since  η  is non-zero on 
 : [array(['zero', 'the level', 'the', 'since', 'on', 'of math', 'of', 'non',
       'math since', 'math', 'level', 'is', 'call'], dtype='<U24')],
 true: 0, pred: 0
859:  in  I . For  MATH  and   MATH  , by  MATH  we denote the 
 : [array(['we denote', 'we', 'the', 'math we', 'math by', 'math and', 'math',
       'in', 'for math', 'for', 'denote the', 'denote', 'by math', 'by',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
860:  by Lewy's theorem (see  [10] ),   MATH   has a non-vanishing Jacobian and 
 : [array(['theorem', 'see', 'non', 'math has', 'math', 'jacobian', 'has',
       'by', 'and', '10'], dtype='<U24')],
 true: 0, pred: 0
862: If   MATH  , the above equation becomes   MATH 
 : [array(['the above', 'the', 'math the', 'math', 'if math', 'if',
       'equation becomes', 'equation', 'becomes math', 'becomes',
       'above equation', 'above'], dtype='<U24')],
 true: 0, pred: 0
863:  MATH   We define the set   MATH   by  MATH  . Then for all 
 : [array(['we define', 'we', 'then for', 'then', 'the set', 'the',
       'set math', 'set', 'math we', 'math then', 'math by', 'math',
       'for all', 'for', 'define the', 'define', 'by math', 'by', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
864:  MATH   Suppose now that   MATH   is an arbitrary 2  π 
 : [array(['that math', 'that', 'suppose', 'now', 'math suppose', 'math is',
       'math', 'is an', 'is', 'an'], dtype='<U24')],
 true: 0, pred: 0
865:  Theorem 1   for large  n ,   MATH   satisfies the conditions of theorem 
 : [array(['theorem', 'the', 'satisfies the', 'satisfies', 'of theorem', 'of',
       'math satisfies', 'math', 'for', 'conditions'], dtype='<U24')],
 true: 0, pred: 0
866:  isentropic Euler flow (cf.  [16] ):  MATH   We use the same change 
 : [array(['we use', 'we', 'use the', 'use', 'the same', 'the', 'same',
       'math we', 'math', 'flow', 'euler', 'change', '16'], dtype='<U24')],
 true: 0, pred: 0
867:  equation system of  MATH  and   MATH  . So if  MATH , then  MATH 
 : [array(['then math', 'then', 'system of', 'system', 'so', 'of math', 'of',
       'math then', 'math so', 'math and', 'math', 'if math', 'if',
       'equation', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
868:  we obtain  MATH , and hence   MATH  , which in turn implies   MATH 
 : [array(['which', 'we obtain', 'we', 'obtain math', 'obtain', 'math which',
       'math and', 'math', 'in', 'implies math', 'implies', 'hence math',
       'hence', 'and hence', 'and'], dtype='<U24')],
 true: 0, pred: 0
869:  MATH  MATH  where  MATH 
 : [array(['where math', 'where', 'math where', 'math math', 'math'],
      dtype='<U24')],
 true: 0, pred: 0
870:  admissible domain Ω in  MATH ,   MATH   the volume element on   MATH 
 : [array(['the', 'on math', 'on', 'math the', 'math math', 'math', 'in math',
       'in', 'element', 'domain', 'admissible domain', 'admissible'],
      dtype='<U24')],
 true: 0, pred: 0
871:  the following linear code over   MATH   by  MATH
 : [array(['the following', 'the', 'over math', 'over', 'math by', 'math',
       'linear code', 'linear', 'following linear', 'following',
       'code over', 'code', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
872:  equivalent to the condition that   MATH   or  MATH . Note that   MATH 
 : [array(['to the', 'to', 'the condition', 'the', 'that math', 'that',
       'or math', 'or', 'note that', 'note', 'math or', 'math note',
       'math', 'equivalent to', 'equivalent', 'condition'], dtype='<U24')],
 true: 0, pred: 0
874:  roots are  MATH such that  MATH  Case 4. If MATH  , then 
 : [array(['then', 'that math', 'that', 'such that', 'such', 'roots are',
       'roots', 'math then', 'math such', 'math', 'if math', 'if', 'case',
       'are math', 'are'], dtype='<U24')],
 true: 0, pred: 0
876:  nonlinear function of the solution   MATH   by MATH  By a slight 
 : [array(['the solution', 'the', 'solution math', 'solution', 'of the', 'of',
       'math by', 'math', 'function of', 'function', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
877:  a closed minimal hypersurface in   MATH   with  S  = constant. If   MATH 
 : [array(['with constant', 'with', 'minimal hypersurface', 'minimal',
       'math with', 'math', 'in math', 'in', 'if math', 'if',
       'hypersurface in', 'hypersurface', 'constant if', 'constant',
       'closed minimal', 'closed'], dtype='<U24')],
 true: 0, pred: 0
878:  continuity of  MATH  and  MATH  MATH   We prove now that   MATH 
 : [array(['we', 'that math', 'that', 'prove', 'of math', 'of', 'now',
       'math we', 'math math', 'math and', 'math', 'continuity of',
       'continuity', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
880:  the unit circle  T , and   MATH   with  MATH  . In view of 
 : [array(['with math', 'with', 'unit circle', 'unit', 'the unit', 'the',
       'of', 'math with', 'math in', 'math', 'in', 'circle', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
881: Setting   MATH   into  (3.39) , we get  MATH 
 : [array(['we get', 'we', 'setting math', 'setting', 'math into', 'math',
       'into 39', 'into', 'get math', 'get', '39 we', '39'], dtype='<U24')],
 true: 0, pred: 0
882:  same values of  d  in   MATH  .
 : [array(['values', 'same', 'of', 'math', 'in math', 'in'], dtype='<U24')],
 true: 0, pred: 0
883:  which is compactly supported in   MATH   and satisfies the condition   MATH 
 : [array(['which is', 'which', 'the condition', 'the', 'supported',
       'satisfies the', 'satisfies', 'math and', 'math', 'is', 'in math',
       'in', 'condition math', 'condition', 'and'], dtype='<U24')],
 true: 0, pred: 0
884: If   MATH  , claim that MATH
 : [array(['that math', 'that', 'math', 'if math', 'if', 'claim that',
       'claim'], dtype='<U24')],
 true: 0, pred: 0
885:  MATH   and  MATH . Furthermore, if   MATH  , then MATH  This is of 
 : [array(['this is', 'this', 'then math', 'then', 'of', 'math this',
       'math then', 'math furthermore', 'math and', 'math', 'is of', 'is',
       'if math', 'if', 'furthermore', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
886:  by shrinking the open neighborhood   MATH   for each point  MATH  if 
 : [array(['the', 'point math', 'point', 'open neighborhood', 'open',
       'neighborhood math', 'neighborhood', 'math if', 'math for', 'math',
       'if', 'for each', 'for', 'each point', 'each', 'by'], dtype='<U24')],
 true: 0, pred: 0
888:  MATH   converging to 0 as   MATH   goes to ∞, such that 
 : [array(['to', 'that', 'such that', 'such', 'math', 'converging', 'as math',
       'as'], dtype='<U24')],
 true: 0, pred: 0
890:  in Σ. First we consider   MATH   From  Proposition 4.1 ,  MATH  and 
 : [array(['we consider', 'we', 'proposition', 'math from', 'math and',
       'math', 'in', 'from', 'first', 'consider math', 'consider', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
891:  MATH   and  MATH , together with   MATH   and  MATH .
 : [array(['with math', 'with', 'together with', 'together', 'math together',
       'math and', 'math', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
892:  the above equation are  MATH  MATH 
 : [array(['the above', 'the', 'math math', 'math', 'equation', 'are math',
       'are', 'above equation', 'above'], dtype='<U24')],
 true: 0, pred: 0
894:  say that a surjective function   MATH   is a weak homeomorphism, if 
 : [array(['weak', 'that', 'surjective function', 'surjective', 'say that',
       'say', 'math is', 'math', 'is', 'if', 'homeomorphism',
       'function math', 'function'], dtype='<U24')],
 true: 1, pred: 1
895:  obtain the boundary conditions at   MATH  : MATH  where we note   MATH 
 : [array(['where we', 'where', 'we', 'the boundary', 'the', 'obtain the',
       'obtain', 'note', 'math where', 'math math', 'math', 'conditions',
       'boundary conditions', 'boundary', 'at math', 'at'], dtype='<U24')],
 true: 0, pred: 0
896:  derivative at the minimal point   MATH   of  MATH  gives us  MATH 
 : [array(['us math', 'us', 'the', 'point math', 'point', 'of math', 'of',
       'minimal', 'math of', 'math gives', 'math', 'gives us', 'gives',
       'derivative', 'at the', 'at'], dtype='<U24')],
 true: 0, pred: 0
898:  the Fricke involution  MATH . As   MATH   for all  MATH  , from the 
 : [array(['the', 'math from', 'math for', 'math as', 'math',
       'involution math', 'involution', 'from the', 'from', 'for all',
       'for', 'as math', 'as', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
899:  satisfying one of the following:   MATH  , or  MATH , or  MATH  , or 
 : [array(['the following', 'the', 'satisfying', 'or math', 'or', 'one',
       'of the', 'of', 'math or', 'math', 'following'], dtype='<U24')],
 true: 0, pred: 0
901:  homogeneous Lie group (modelled on   MATH   but this is not restricting 
 : [array(['this is', 'this', 'on math', 'on', 'not', 'math but', 'math',
       'lie group', 'lie', 'is not', 'is', 'homogeneous', 'group', 'but'],
      dtype='<U24')],
 true: 0, pred: 0
902:  where  MATH . Then we have  MATH 
 : [array(['where math', 'where', 'we have', 'we', 'then we', 'then',
       'math then', 'math', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
903:  of the code  MATH  is   MATH  . Observe that  MATH  gives the 
 : [array(['the code', 'the', 'that math', 'that', 'of the', 'of',
       'observe that', 'observe', 'math observe', 'math is', 'math gives',
       'math', 'is math', 'is', 'gives', 'code math', 'code'],
      dtype='<U24')],
 true: 0, pred: 0
904:  smooth functions of  Du  and   MATH  .
 : [array(['smooth', 'of', 'math', 'functions', 'du', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
906:  MATH  . Denote MATH MATH MATH  MATH   By some basic tools from 
 : [array(['some', 'math math', 'math denote', 'math by', 'math', 'from',
       'denote math', 'denote', 'by'], dtype='<U24')],
 true: 0, pred: 0
907:  MATH   are purely imaginary. Since   MATH   and  MATH , we have   MATH 
 : [array(['we have', 'we', 'since math', 'since', 'purely imaginary',
       'purely', 'math we', 'math are', 'math and', 'math', 'imaginary',
       'have math', 'have', 'are', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
908:  Δ in  MATH  given by  MATH   where  MATH  is the surface 
 : [array(['where math', 'where', 'the', 'surface', 'math where', 'math is',
       'math given', 'math', 'is the', 'is', 'in math', 'in', 'given by',
       'given', 'by math', 'by'], dtype='<U24')],
 true: 0, pred: 0
909:  if we set for simplicity   MATH   then by using the convexity 
 : [array(['we set', 'we', 'using the', 'using', 'then by', 'then', 'the',
       'simplicity', 'set', 'math then', 'math', 'if we', 'if',
       'for simplicity', 'for', 'by using', 'by'], dtype='<U24')],
 true: 0, pred: 0
910:  of  p  and  q  as  MATH   for all  MATH .
 : [array(['of and', 'of', 'math for', 'math', 'for all', 'for', 'as math',
       'as', 'and', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
911:  MATH   and satisfies the condition   MATH  . Here  ρ  is a smooth 
 : [array(['the condition', 'the', 'smooth', 'satisfies the', 'satisfies',
       'math here', 'math and', 'math', 'is', 'here', 'condition math',
       'condition', 'and'], dtype='<U24')],
 true: 0, pred: 0
912:  (2.1)   can be rewritten as  MATH   where  MATH ,  MATH , and   MATH 
 : [array(['where math', 'where', 'rewritten', 'math where', 'math math',
       'math and', 'math', 'can be', 'can', 'be', 'as math', 'as',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
913:  has a unique solution in   MATH   , say, and this solution is 
 : [array(['unique solution', 'unique', 'this', 'solution in', 'solution',
       'say', 'math', 'is', 'in math', 'in', 'has unique', 'has', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
914:  of absolute value  MATH  with   MATH   for all  MATH  . For each 
 : [array(['with math', 'with', 'value', 'of', 'math with', 'math for',
       'math', 'for each', 'for all', 'for', 'each', 'all math', 'all'],
      dtype='<U24')],
 true: 0, pred: 0
915:  MATH   for  MATH , we get  MATH   exactly as in  (4.14)  , with 
 : [array(['with', 'we get', 'we', 'math we', 'math for', 'math', 'in',
       'get math', 'get', 'for math', 'for', 'exactly', 'as in', 'as',
       '14'], dtype='<U24')],
 true: 0, pred: 0
916:  with respect to  n  on   MATH   as well as on each 
 : [array(['with respect', 'with', 'well', 'to', 'respect to', 'respect',
       'on math', 'on', 'math as', 'math', 'each', 'as'], dtype='<U24')],
 true: 0, pred: 0
917:  result  MATH  Since  MATH , then   MATH  . Hence  MATH .
 : [array(['then math', 'then', 'since math', 'since', 'result', 'math then',
       'math since', 'math hence', 'math', 'hence math', 'hence'],
      dtype='<U24')],
 true: 0, pred: 0
918:  MATH  : MATH  where, with   MATH  , MATH
 : [array(['with math', 'with', 'where', 'math where', 'math math', 'math'],
      dtype='<U24')],
 true: 0, pred: 0
919:  represented by Lie brackets of   MATH  , we obtain that  u  is 
 : [array(['we obtain', 'we', 'that is', 'that', 'represented by',
       'represented', 'of math', 'of', 'obtain that', 'obtain', 'math we',
       'math', 'lie', 'is', 'by'], dtype='<U24')],
 true: 0, pred: 0
920:  the lemma holds trivially for   MATH   if  MATH , where  MATH  is 
 : [array(['where math', 'where', 'trivially', 'the lemma', 'the',
       'math where', 'math is', 'math if', 'math', 'lemma', 'is',
       'if math', 'if', 'holds', 'for math', 'for'], dtype='<U24')],
 true: 0, pred: 0
921: Let MATH  Let  MATH   Assume that  MATH  with   MATH 
 : [array(['with math', 'with', 'that math', 'that', 'math with', 'math let',
       'math assume', 'math', 'let math', 'let', 'assume that', 'assume'],
      dtype='<U24')],
 true: 0, pred: 0
922:  and  MATH . Now, we have  MATH   By  (4.3)  and  (5.10)  , we 
 : [array(['we have', 'we', 'now we', 'now', 'math now', 'math by', 'math',
       'have math', 'have', 'by and', 'by', 'and math', 'and', '10 we',
       '10'], dtype='<U24')],
 true: 0, pred: 0
923:  and  MATH  become MATH  where  MATH 
 : [array(['where math', 'where', 'math where', 'math become', 'math',
       'become math', 'become', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
924: Let  MATH  and MATH . Let MATH  be 
 : [array(['math let', 'math be', 'math and', 'math', 'let math', 'let', 'be',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
925: Let MATH  where  MATH   with MATH  Then equation   (8.1) 
 : [array(['with math', 'with', 'where math', 'where', 'then equation',
       'then', 'math with', 'math where', 'math then', 'math', 'let math',
       'let', 'equation'], dtype='<U24')],
 true: 0, pred: 0
927: Case I:  MATH  .
 : [array(['math', 'case math', 'case'], dtype='<U24')],
 true: 0, pred: 0
928:  (4.3)   that if  MATH  then   MATH   and  MATH , and hence   MATH 
 : [array(['then math', 'then', 'that if', 'that', 'math then', 'math and',
       'math', 'if math', 'if', 'hence math', 'hence', 'and math',
       'and hence', 'and'], dtype='<U24')],
 true: 0, pred: 0
929:  Lemma 4.2]  , we know that   MATH   and  MATH  have nonzero real 
 : [array(['we know', 'we', 'that math', 'that', 'real', 'nonzero',
       'math have', 'math and', 'math', 'lemma we', 'lemma', 'know that',
       'know', 'have', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
930:  estimate and the definitions of   MATH   and of  MATH  , we end 
 : [array(['we', 'the', 'of math', 'of', 'math we', 'math and', 'math',
       'estimate', 'end', 'and the', 'and'], dtype='<U24')],
 true: 0, pred: 0
931:  Claim that there exist directions   MATH   and  MATH , such that   MATH 
 : [array(['there exist', 'there', 'that math', 'that', 'such that', 'such',
       'math such', 'math and', 'math', 'exist', 'directions math',
       'directions', 'claim that', 'claim', 'and math', 'and'],
      dtype='<U24')],
 true: 1, pred: 1
932:  MATH   and  MATH . For any   MATH  , we have  MATH  . Then we 
 : [array(['we have', 'we', 'then we', 'then', 'math we', 'math then',
       'math for', 'math and', 'math', 'have math', 'have', 'for any',
       'for', 'any math', 'any', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
933:  is odd, then we have   MATH 
 : [array(['we have', 'we', 'then we', 'then', 'odd then', 'odd', 'math',
       'is odd', 'is', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
934: Notice that MATH  where  MATH   Thus, we also obtain  MATH 
 : [array(['where math', 'where', 'we also', 'we', 'thus we', 'thus',
       'that math', 'that', 'obtain math', 'obtain', 'notice that',
       'notice', 'math where', 'math thus', 'math', 'also obtain', 'also'],
      dtype='<U24')],
 true: 0, pred: 0
935: Let  MATH   where  MATH  is a nonsingular 
 : [array(['where math', 'where', 'math where', 'math is', 'math', 'let math',
       'let', 'is'], dtype='<U24')],
 true: 0, pred: 0
936:  Haar measure  dν , and let   MATH   be left-invariant vector fields giving 
 : [array(['vector fields', 'vector', 'measure', 'math be', 'math',
       'let math', 'let', 'left invariant', 'left', 'invariant vector',
       'invariant', 'fields', 'be', 'and let', 'and'], dtype='<U24')],
 true: 1, pred: 1
937:  From  (6.8)  we always have  MATH   for all  MATH  with   MATH 
 : [array(['with math', 'with', 'we', 'math with', 'math for', 'math',
       'have math', 'have', 'from we', 'from', 'for all', 'for', 'always',
       'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
938:  For this, we observe that   MATH   Then of course we have 
 : [array(['we observe', 'we have', 'we', 'this', 'then', 'that math', 'that',
       'of', 'observe that', 'observe', 'math then', 'math', 'have',
       'for this', 'for'], dtype='<U24')],
 true: 0, pred: 0
939:  Möbius transformation, for  MATH  with   MATH  , we have MATH  for some 
 : [array(['with math', 'with', 'we have', 'we', 'transformation', 'some',
       'math with', 'math we', 'math for', 'math', 'have math', 'have',
       'for some', 'for math', 'for'], dtype='<U24')],
 true: 0, pred: 0
940:  is a Niho exponent and   MATH   . In the following, we present 
 : [array(['we', 'the following', 'the', 'niho', 'math in', 'math', 'is',
       'in the', 'in', 'following', 'exponent', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
941:  which is a basis of   MATH   over  MATH . Assume that   MATH 
 : [array(['which is', 'which', 'that math', 'that', 'over math', 'over',
       'of math', 'of', 'math over', 'math assume', 'math', 'is basis',
       'is', 'basis of', 'basis', 'assume that', 'assume'], dtype='<U24')],
 true: 0, pred: 0
942:  in  MATH of the equation  MATH  with the boundary condition  MATH 
 : [array(['with the', 'with', 'the equation', 'the boundary', 'the',
       'of the', 'of', 'math with', 'math of', 'math', 'in math', 'in',
       'equation math', 'equation', 'condition math', 'condition',
       'boundary condition', 'boundary'], dtype='<U24')],
 true: 0, pred: 0
944:  perturbation of  MATH  such that   MATH   is small enough.
 : [array(['that math', 'that', 'such that', 'such', 'small', 'of math', 'of',
       'math such', 'math is', 'math', 'is'], dtype='<U24')],
 true: 0, pred: 0
945:  The assumptions on  u  and   MATH   guarantee that the double integral 
 : [array(['the', 'that the', 'that', 'on and', 'on', 'math', 'integral',
       'double', 'assumptions on', 'assumptions', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
946:  MATH  . In particular, for distinct   MATH  , we have  MATH  . The last 
 : [array(['we have', 'we', 'the last', 'the', 'particular for', 'particular',
       'math we', 'math the', 'math in', 'math', 'last', 'in particular',
       'in', 'have math', 'have', 'for', 'distinct'], dtype='<U24')],
 true: 0, pred: 0
947:  where we used again that   MATH   . Thus the claim is true 
 : [array(['where we', 'where', 'we used', 'we', 'used', 'true', 'thus the',
       'thus', 'the claim', 'the', 'that math', 'that', 'math thus',
       'math', 'is', 'claim', 'again'], dtype='<U24')],
 true: 0, pred: 0
948:  MATH   where MATH  That is  MATH   It is simple to see 
 : [array(['where math', 'where', 'to see', 'to', 'that is', 'that', 'simple',
       'see', 'math where', 'math that', 'math it', 'math', 'it is', 'it',
       'is simple', 'is math', 'is'], dtype='<U24')],
 true: 0, pred: 0
949:  represented by  B , we have  MATH   Then any  MATH  and   MATH 
 : [array(['we have', 'we', 'then', 'represented by', 'represented',
       'math then', 'math and', 'math', 'have math', 'have', 'by we',
       'by', 'any math', 'any', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
950:  MATH   is not zero at   MATH   we have MATH MATH  and 
 : [array(['zero', 'we have', 'we', 'not', 'math we', 'math math', 'math is',
       'math and', 'math', 'is not', 'is', 'have math', 'have', 'at math',
       'at', 'and'], dtype='<U24')],
 true: 0, pred: 0
951:  and  MATH  tangent vector to   MATH  , perpendicular to  MATH  and directed 
 : [array(['vector', 'to math', 'to', 'tangent', 'math and', 'math',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
952:  to disappear in the limit   MATH   , which corresponds to the equation 
 : [array(['which', 'to the', 'to', 'the limit', 'the equation', 'the',
       'math which', 'math', 'limit', 'in the', 'in', 'equation',
       'corresponds to', 'corresponds'], dtype='<U24')],
 true: 0, pred: 0
953:  to zero, and we have   MATH   This completes the proof. □ 
 : [array(['zero', 'we have', 'we', 'to', 'this', 'the proof', 'the', 'proof',
       'math this', 'math', 'have math', 'have', 'and we', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
954:  (2.4)  , we obtain  MATH ,  MATH ,   MATH   and  MATH , for  MATH  . Therefore 
 : [array(['we obtain', 'we', 'therefore', 'obtain math', 'obtain',
       'math therefore', 'math math', 'math for', 'math and', 'math',
       'for math', 'for', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
956:  span the Lie algebra of   MATH  .
 : [array(['the', 'of math', 'of', 'math', 'lie'], dtype='<U24')],
 true: 0, pred: 0
957:  write  MATH . In particular, for   MATH  , the eta quotient  MATH  is 
 : [array(['write math', 'write', 'the eta', 'the', 'quotient math',
       'quotient', 'particular for', 'particular', 'math the', 'math is',
       'math in', 'math', 'is', 'in particular', 'in', 'for math', 'for',
       'eta quotient', 'eta'], dtype='<U24')],
 true: 0, pred: 0
958:  MATH   Also observe that since   MATH  , we have  MATH 
 : [array(['we have', 'we', 'that', 'since math', 'since', 'observe that',
       'observe', 'math we', 'math also', 'math', 'have math', 'have',
       'also'], dtype='<U24')],
 true: 0, pred: 0
959:  quantity as the norm of   MATH   derivatives of the solution, measured 
 : [array(['the solution', 'the norm', 'the', 'solution', 'quantity',
       'of the', 'of math', 'of', 'norm of', 'norm', 'math',
       'derivatives of', 'derivatives', 'as the', 'as'], dtype='<U24')],
 true: 0, pred: 0
961:  get  MATH  If  MATH , then  MATH   It means  MATH  . As a 
 : [array(['then math', 'then', 'means math', 'means', 'math then', 'math it',
       'math if', 'math as', 'math', 'it', 'if math', 'if', 'get math',
       'get', 'as'], dtype='<U24')],
 true: 0, pred: 0
962:  strongly regular graph with parameters   MATH  .
 : [array(['with parameters', 'with', 'strongly regular', 'strongly',
       'regular graph', 'regular', 'parameters math', 'parameters',
       'math', 'graph with', 'graph'], dtype='<U24')],
 true: 1, pred: 1
963:  that a local weak solution   MATH   is locally Hölder continuous for 
 : [array(['weak solution', 'weak', 'that', 'solution math', 'solution',
       'math is', 'math', 'locally', 'local weak', 'local', 'is',
       'hölder continuous', 'hölder', 'for', 'continuous'], dtype='<U24')],
 true: 0, pred: 0
964:  back to the original solution   MATH   with a scaling, we get 
 : [array(['with', 'we get', 'we', 'to the', 'to', 'the', 'solution math',
       'solution', 'math with', 'math', 'get'], dtype='<U24')],
 true: 0, pred: 0
965:  an arc length parameterization of   MATH   , i.e. a continuous bijection of 
 : [array(['of math', 'of', 'math', 'length', 'continuous', 'bijection', 'an'],
      dtype='<U24')],
 true: 0, pred: 0
966:  minimum point of  MATH , then   MATH   has nonnegative scalar curvature by 
 : [array(['then math', 'then', 'scalar curvature', 'scalar', 'point of',
       'point', 'of math', 'of', 'nonnegative', 'minimum', 'math then',
       'math has', 'math', 'has', 'curvature', 'by'], dtype='<U24')],
 true: 0, pred: 0
967:  Σ, we need to treat   MATH   microlocally. This means that for 
 : [array(['we need', 'we', 'to', 'this means', 'this', 'that for', 'that',
       'need to', 'need', 'means that', 'means', 'math', 'for'],
      dtype='<U24')],
 true: 0, pred: 0
968:  the only simple roots to   MATH  , respectively.
 : [array(['to math', 'to', 'the', 'simple roots', 'simple', 'roots',
       'respectively', 'only', 'math respectively', 'math'], dtype='<U24')],
 true: 0, pred: 0
969:  Dini continuous. We say that   MATH   is of class  MATH ,   MATH 
 : [array(['we say', 'we', 'that math', 'that', 'say that', 'say', 'of class',
       'of', 'math math', 'math is', 'math', 'is of', 'is', 'dini',
       'continuous', 'class math', 'class'], dtype='<U24')],
 true: 0, pred: 0
970:  a convex Jordan curve, then   MATH  , and therefore  MATH  . In the 
 : [array(['therefore math', 'therefore', 'then math', 'then', 'the',
       'math in', 'math and', 'math', 'jordan curve', 'jordan', 'in the',
       'in', 'curve', 'convex', 'and therefore', 'and'], dtype='<U24')],
 true: 0, pred: 0
971:  (4.3)   and the fact that   MATH   we have  MATH  . Then from 
 : [array(['we have', 'we', 'then from', 'then', 'the fact', 'the',
       'that math', 'that', 'math we', 'math then', 'math', 'have math',
       'have', 'from', 'fact that', 'fact', 'and the', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
972:  MATH  . Then the linear code   MATH   defined in  (3)  is a 
 : [array(['then the', 'then', 'the linear', 'the', 'math then',
       'math defined', 'math', 'linear code', 'linear', 'is', 'in is',
       'in', 'defined in', 'defined', 'code math', 'code'], dtype='<U24')],
 true: 1, pred: 1
974:  a  continuous function MATH on  MATH  such that MATH  If 
 : [array(['that math', 'that', 'such that', 'such', 'on math', 'on',
       'math such', 'math on', 'math if', 'math', 'if', 'function math',
       'function', 'continuous function', 'continuous'], dtype='<U24')],
 true: 0, pred: 0
976:  know that in this case   MATH   and  MATH  . Hence for any 
 : [array(['this case', 'this', 'that in', 'that', 'math hence', 'math and',
       'math', 'know that', 'know', 'in this', 'in', 'hence', 'for any',
       'for', 'case math', 'case', 'any', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
977:  the above argument, we obtain   MATH 
 : [array(['we obtain', 'we', 'the above', 'the', 'obtain math', 'obtain',
       'math', 'argument', 'above'], dtype='<U24')],
 true: 0, pred: 0
978: Let  MATH , putting   MATH   into  (4.8)  we can get 
 : [array(['we can', 'we', 'math into', 'math', 'let math', 'let', 'into',
       'get', 'can get', 'can'], dtype='<U24')],
 true: 0, pred: 0
979:  If  MATH then for every  MATH  MATH
 : [array(['then for', 'then', 'math then', 'math math', 'math', 'if math',
       'if', 'for every', 'for', 'every math', 'every'], dtype='<U24')],
 true: 0, pred: 0
981:  MATH   vertices adjacent to both   MATH   and  MATH .
 : [array(['vertices', 'to', 'math and', 'math', 'both math', 'both',
       'and math', 'and', 'adjacent'], dtype='<U24')],
 true: 1, pred: 1
984: Then, for   MATH  , taking  MATH  and  MATH  we 
 : [array(['we', 'then for', 'then', 'taking math', 'taking', 'math we',
       'math taking', 'math and', 'math', 'for math', 'for', 'and math',
       'and'], dtype='<U24')],
 true: 0, pred: 0
986:  MATH   for all  MATH  with   MATH  .
 : [array(['with math', 'with', 'math with', 'math for', 'math', 'for all',
       'for', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
987: Let MATH be  MATH   closed minimal Willmore hypersurface with 
 : [array(['with', 'willmore hypersurface', 'willmore', 'minimal willmore',
       'minimal', 'math closed', 'math be', 'math', 'let math', 'let',
       'hypersurface with', 'hypersurface', 'closed minimal', 'closed',
       'be math', 'be'], dtype='<U24')],
 true: 0, pred: 0
988: Let  MATH  , MATH and MATH  . We take 
 : [array(['we take', 'we', 'take', 'math we', 'math math', 'math and',
       'math', 'let math', 'let', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
989:  If  MATH , we can obtain   MATH   and  MATH . Since  MATH  , we 
 : [array(['we can', 'we', 'since math', 'since', 'obtain math', 'obtain',
       'math we', 'math since', 'math and', 'math', 'if math', 'if',
       'can obtain', 'can', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
990:  MATH   where  d  is the   MATH   -gauge, so that the function 
 : [array(['where is', 'where', 'the math', 'the function', 'the', 'that the',
       'that', 'so that', 'so', 'math where', 'math gauge', 'math',
       'is the', 'is', 'gauge', 'function'], dtype='<U24')],
 true: 0, pred: 0
991:  less than or equal to   MATH   We have MATH  The above 
 : [array(['we have', 'we', 'to math', 'to', 'the above', 'the', 'than', 'or',
       'math we', 'math the', 'math', 'have math', 'have', 'equal to',
       'equal', 'above'], dtype='<U24')],
 true: 0, pred: 0
992:  and  (2.6) , we note that   MATH   is multiplicative in  N  and 
 : [array(['we', 'that math', 'that', 'note that', 'note', 'multiplicative',
       'math is', 'math', 'is', 'in and', 'in', 'and we', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
993:  MATH   where  MATH  with   MATH  , and  MATH  with  MATH ,   MATH 
 : [array(['with math', 'with', 'where math', 'where', 'math with',
       'math where', 'math math', 'math and', 'math', 'and math', 'and'],
      dtype='<U24')],
 true: 0, pred: 0
994:  using the Lipschitz character of   MATH   , we can now easily get 
 : [array(['we can', 'we', 'using the', 'using', 'the lipschitz', 'the',
       'of math', 'of', 'now', 'math we', 'math', 'lipschitz', 'get',
       'character of', 'character', 'can'], dtype='<U24')],
 true: 0, pred: 0
995:  exists a canonical bijection between   MATH   and  MATH . If  MATH  , then 
 : [array(['then', 'math then', 'math if', 'math and', 'math', 'if math',
       'if', 'exists', 'canonical', 'bijection', 'between math',
       'between', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
996:  nonzero entries. Hence, we have   MATH   for all  k  . The claim 
 : [array(['we have', 'we', 'the claim', 'the', 'nonzero', 'math for', 'math',
       'hence we', 'hence', 'have math', 'have', 'for all', 'for',
       'claim', 'all the', 'all'], dtype='<U24')],
 true: 0, pred: 0
998:  three quantities and we obtain   MATH   Combining the above four equations 
 : [array(['we obtain', 'we', 'the above', 'the', 'obtain math', 'obtain',
       'math combining', 'math', 'four', 'equations', 'combining the',
       'combining', 'and we', 'and', 'above'], dtype='<U24')],
 true: 0, pred: 0
999: Let  MATH  and MATH  be two positive 
 : [array(['two positive', 'two', 'positive', 'math be', 'math and', 'math',
       'let math', 'let', 'be two', 'be', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
1000:  as  Lemma 7 . For any  MATH  , let MATH
 : [array(['math let', 'math', 'let math', 'let', 'lemma', 'for any', 'for',
       'as', 'any math', 'any'], dtype='<U24')],
 true: 0, pred: 0
1001:  fundamental solution to Δ in   MATH   given by MATH  where   MATH 
 : [array(['where math', 'where', 'to', 'solution to', 'solution',
       'math where', 'math given', 'math', 'in math', 'in', 'given by',
       'given', 'fundamental solution', 'fundamental', 'by math', 'by'],
      dtype='<U24')],
 true: 0, pred: 0
1002:  being some smooth functions of   MATH   and  MATH .
 : [array(['some', 'smooth', 'of math', 'of', 'math and', 'math', 'functions',
       'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
1003:  of  Lemma 8 , we have   MATH   . Therefore, the length of the 
 : [array(['we have', 'we', 'therefore the', 'therefore', 'the length', 'the',
       'of the', 'of', 'math therefore', 'math', 'length of', 'length',
       'lemma we', 'lemma', 'have math', 'have'], dtype='<U24')],
 true: 0, pred: 0
1004:  second eigenvalue of the fractional   MATH  -Laplacian
 : [array(['the fractional', 'the', 'second', 'of the', 'of',
       'math laplacian', 'math', 'laplacian', 'fractional math',
       'fractional'], dtype='<U24')],
 true: 0, pred: 0
1005:  nonnegative at each element of   MATH  , then we write  MATH  . Otherwise, 
 : [array(['write math', 'write', 'we write', 'we', 'then we', 'then',
       'otherwise', 'of math', 'of', 'nonnegative', 'math then',
       'math otherwise', 'math', 'element of', 'element', 'each', 'at'],
      dtype='<U24')],
 true: 0, pred: 0
1006:  C  such that for all  MATH  , MATH and MATH  , the following 
 : [array(['the following', 'the', 'that for', 'that', 'such that', 'such',
       'math the', 'math math', 'math and', 'math', 'for all', 'for',
       'following', 'and math', 'and', 'all math', 'all'], dtype='<U24')],
 true: 0, pred: 0
1008:  will be also denoted by   MATH   such that MATH  Thus   MATH 
 : [array(['will be', 'will', 'thus math', 'thus', 'that math', 'that',
       'such that', 'such', 'math thus', 'math such', 'math', 'denoted',
       'by math', 'by', 'be', 'also'], dtype='<U24')],
 true: 0, pred: 0
1009:  module  MATH  of continuity of   MATH   and  MATH MATH  We prove 
 : [array(['we', 'prove', 'of math', 'of continuity', 'of', 'math we',
       'math of', 'math math', 'math and', 'math', 'continuity of',
       'continuity', 'and math', 'and'], dtype='<U24')],
 true: 0, pred: 0
1010:  (8)  , then for every constant  MATH  MATH satisfies (8)  . Moreover for 
 : [array(['then for', 'then', 'satisfies', 'moreover', 'math satisfies',
       'math math', 'math', 'for every', 'for', 'every', 'constant math',
       'constant'], dtype='<U24')],
 true: 0, pred: 0
1011:  lead to the estimates of   MATH   and hence complete the proof 
 : [array(['to the', 'to', 'the proof', 'the estimates', 'the', 'proof',
       'of math', 'of', 'math and', 'math', 'hence', 'estimates of',
       'estimates', 'and hence', 'and'], dtype='<U24')],
 true: 0, pred: 0
1012: We prove that for   MATH   , solutions of equations modeled by 
 : [array(['we', 'that for', 'that', 'solutions of', 'solutions',
       'prove that', 'prove', 'of', 'math', 'for math', 'for',
       'equations', 'by'], dtype='<U24')],
 true: 0, pred: 0
1013:  precisely, near  MATH , we have   MATH   for some continuous  MATH  respectively. 
 : [array(['we have', 'we', 'some continuous', 'some', 'respectively',
       'precisely', 'near math', 'near', 'math we', 'math respectively',
       'math for', 'math', 'have math', 'have', 'for some', 'for',
       'continuous math', 'continuous'], dtype='<U24')],
 true: 0, pred: 0
1014:  MATH  , the Rankine–Hugoniot conditions hold:  MATH  MATH  where  MATH 
 : [array(['where math', 'where', 'the rankine', 'the', 'rankine hugoniot',
       'rankine', 'math where', 'math the', 'math math', 'math',
       'hugoniot', 'hold', 'conditions'], dtype='<U24')],
 true: 0, pred: 0
1016:  as  MATH  where MATH  with   MATH   being the sonic speed. Denote 
 : [array(['with math', 'with', 'where math', 'where', 'the', 'math with',
       'math where', 'math', 'denote', 'as math', 'as'], dtype='<U24')],
 true: 0, pred: 0
1018:  classes of the cusps of   MATH   (see  [7,11] ): MATH  where   MATH 
 : [array(['where math', 'where', 'the cusps', 'the', 'see', 'of the',
       'of math', 'of', 'math where', 'math see', 'math', 'cusps', '11'],
      dtype='<U24')],
 true: 0, pred: 0
